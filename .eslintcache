[{"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\index.js":"1","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\App.js":"2","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchDetail.js":"3","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Login.js":"4","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Search.js":"5","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Home.js":"6","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchForm.js":"7","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\About.js":"8","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Admin.js":"9","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Signup.js":"10","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Profile.js":"11","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\UserDetail.js":"12","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Layout.js":"13","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Dashboard.js":"14","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Statistics.js":"15","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Loading.js":"16","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchPopup.js":"17","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\StatisticsTable.js":"18","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\location.services.js":"19","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\user.service.js":"20","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\auth.service.js":"21","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\functions.utilities.js":"22","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\CasesGraph.js":"23","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\DeathsGraph.js":"24","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\authHeader.utilities.js":"25","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\localStorage.utilities.js":"26"},{"size":323,"mtime":1609646050998,"results":"27","hashOfConfig":"28"},{"size":1661,"mtime":1610836886038,"results":"29","hashOfConfig":"28"},{"size":4279,"mtime":1610742361114,"results":"30","hashOfConfig":"28"},{"size":4558,"mtime":1610742361112,"results":"31","hashOfConfig":"28"},{"size":17003,"mtime":1610772137960,"results":"32","hashOfConfig":"28"},{"size":664,"mtime":1610742361112,"results":"33","hashOfConfig":"28"},{"size":6320,"mtime":1610772137961,"results":"34","hashOfConfig":"28"},{"size":1008,"mtime":1611972628067,"results":"35","hashOfConfig":"28"},{"size":2965,"mtime":1610742361109,"results":"36","hashOfConfig":"28"},{"size":9419,"mtime":1610742361115,"results":"37","hashOfConfig":"28"},{"size":1067,"mtime":1609402605776,"results":"38","hashOfConfig":"28"},{"size":7963,"mtime":1610742361118,"results":"39","hashOfConfig":"28"},{"size":2765,"mtime":1610742361120,"results":"40","hashOfConfig":"28"},{"size":7502,"mtime":1610772024254,"results":"41","hashOfConfig":"28"},{"size":3927,"mtime":1610772024257,"results":"42","hashOfConfig":"28"},{"size":471,"mtime":1610742361121,"results":"43","hashOfConfig":"28"},{"size":548,"mtime":1610772137962,"results":"44","hashOfConfig":"28"},{"size":5133,"mtime":1610772024257,"results":"45","hashOfConfig":"28"},{"size":1116,"mtime":1610742361129,"results":"46","hashOfConfig":"28"},{"size":3473,"mtime":1611971571921,"results":"47","hashOfConfig":"28"},{"size":1274,"mtime":1610742361128,"results":"48","hashOfConfig":"28"},{"size":259,"mtime":1609376227974,"results":"49","hashOfConfig":"28"},{"size":835,"mtime":1610742361110,"results":"50","hashOfConfig":"28"},{"size":833,"mtime":1610772024255,"results":"51","hashOfConfig":"28"},{"size":359,"mtime":1609402605778,"results":"52","hashOfConfig":"28"},{"size":442,"mtime":1609376227975,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"c4j1ns",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\index.js",[],["119","120"],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\App.js",["121"],"import {Switch, Route} from 'react-router-dom'\r\n\r\n//Component Imports\r\nimport Search from './components/Search'\r\nimport SearchForm from './components/SearchForm'\r\nimport SearchDetail from './components/SearchDetail'\r\n// import New from \"./components/New\"\r\nimport Home from './components/Home'\r\nimport About from './components/About'\r\n\r\n//HOC which wraps around other components\r\nimport Layout from './components/common/Layout'\r\nimport Login from './components/Login'\r\nimport Signup from './components/Signup'\r\n\r\n// Admin Components\r\nimport Admin from './components/Admin'\r\nimport UserDetail from './components/UserDetail'\r\n\r\n// Dashboard\r\nimport Dashboard from './components/Dashboard'\r\n\r\n// --- TEST COMPONENTS --- //\r\nimport Profile from './components/Profile'\r\n\r\n//CSS imports\r\nimport './css/App.css'\r\nimport './css/site.css'\r\nimport './css/Signup.css'\r\nimport './css/Login.css'\r\nimport './css/Home.css'\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <Switch>\r\n        <Route exact path='/search' component={SearchForm}/>\r\n        <Route exact path='/search/:id' component={SearchDetail} />\r\n        <Route exact path={['/','/home']} component={Home}/>\r\n        <Route exact path='/about' component={About} />\r\n        <Route exact path='/login' component={Login}/>\r\n        <Route exact path='/register' component={Signup}/>\r\n        <Route exact path='/admin' component={Admin} />\r\n        <Route exact path='/dashboard' component={Dashboard} />\r\n        <Route exact path='/profile' component={Profile} />\r\n        <Route exact path='/admin/users/:id' component={UserDetail} />\r\n      </Switch>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchDetail.js",["122","123"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { getOneLocation } from '../services/location.services'\r\nimport { addFavorite, getFavorites, removeFavorite } from '../services/user.service'\r\nimport { getCurrentUser } from '../services/auth.service'\r\n\r\nimport Statistics from './Statistics'\r\nimport '../css/SearchDetail.css'\r\n\r\nconst SearchDetail = () => {\r\n    const form = useRef()\r\n    const [location, setLocation] = useState('')\r\n    const [currentUser, setCurrentUser] = useState(undefined)\r\n    const [favoriteLocations, setFavoriteLocations] = useState([])\r\n    const [message, setMessage] = useState('')\r\n    let { id } = useParams()\r\n\r\n    useEffect(() => {\r\n        getOneLocation(id).then(response => {\r\n            setLocation(response.data)\r\n            },\r\n            (error) => {\r\n                setMessage(error)\r\n                setLocation(error)\r\n            }\r\n        )\r\n        const user = getCurrentUser()\r\n        if(user) {\r\n            setCurrentUser(user)\r\n            getFavorites().then(favorites => {\r\n                setFavoriteLocations(favorites)\r\n            },\r\n            (error) => {\r\n                setMessage(error)\r\n                setFavoriteLocations(error)\r\n            })\r\n        }\r\n    },[])\r\n\r\n    const handleAddFavorite = e => {\r\n        e.preventDefault()\r\n        let user = currentUser.id\r\n        let id = e.target.id.value\r\n\r\n        addFavorite(user,id)\r\n        .then(response => {\r\n            // console.log(response.data)\r\n            setMessage(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => setMessage(err))\r\n    }\r\n\r\n    const handleRemove = event => {\r\n        event.preventDefault()\r\n        let user = currentUser.id\r\n        let id = (event.target.id.value)\r\n\r\n        removeFavorite(user, id)\r\n        .then(response => {\r\n            // console.log(response.data)\r\n            setMessage(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => setMessage(err))\r\n    }\r\n\r\n    return(\r\n        <div className='main container'>\r\n            {location ? (\r\n                <div className='row header-container'>\r\n                    <h3>{location.city}, {location.state} - {location.country}</h3>\r\n                    {currentUser ? (\r\n                        <>\r\n                        {(favoriteLocations.length > 0 && favoriteLocations.some(existing => existing._id === location._id)) ? (\r\n                            <Form ref={form} onSubmit={handleRemove}>\r\n                                <Input type='hidden' value={location._id} name='id'/>\r\n                                <Input type='submit' value='Remove from Favorite Locations' name='submit' className='waves-effect waves-light btn'/>\r\n                            </Form>\r\n                        ) : (\r\n                            <Form ref={form} onSubmit={handleAddFavorite}>\r\n                                <Input type='hidden' value={location._id} name='id'/>\r\n                                <Input type='submit' value='Add to Favorite Locations' name='submit' className='waves-effect waves-light btn'/>\r\n                            </Form>\r\n                        )}\r\n                        </>\r\n                    ) : (\r\n                        <div><Link to='/login'>Login</Link> or <Link to='/register'>Register</Link> to add to favorite locations!</div>\r\n                    )}\r\n                    <div className='row back-container'>\r\n                        <Link to='/search' className='waves-effect waves-teal btn-flat'>Back to Map</Link>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className='progress'>\r\n                    <span className='indeterminate'></span>\r\n                </div>\r\n            )}\r\n            <div className='row statistics-container'>\r\n                <Statistics\r\n                    newCountry={location.country}\r\n                    newCounty={location.county}\r\n                    newRegion={location.state}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchDetail","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Login.js",["124"],"import React, { useState, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport CheckButton from 'react-validation/build/button'\r\n\r\n// Components\r\nimport Loading from './common/Loading'\r\n\r\n// Helper\r\nimport { login } from '../services/auth.service'\r\nimport { resMessage } from '../utilities/functions.utilities'\r\n\r\n//Function given to react-validator\r\nconst required = (value) => {\r\n    if(!value){\r\n        return (\r\n            <div className='alert'>\r\n                This field is required!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Login = (props) => {\r\n    const form = useRef()\r\n    const checkBtn = useRef()\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n\r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value\r\n        setUsername(username)\r\n    }\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value\r\n        setPassword(password)\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        //Prevent reload of pressing the button\r\n        e.preventDefault()\r\n        //Prevent message clear them out\r\n        setMessage('')\r\n        setLoading(true)\r\n\r\n        // validtes all the fields in your form\r\n        form.current.validateAll()\r\n        \r\n        // Validator stores errors and we can check if errors exist\r\n        if(checkBtn.current.context._errors.length === 0) {\r\n            login(username, password).then(\r\n                ()=> {\r\n                    props.history.push('/dashboard')\r\n                    window.location.reload()\r\n                },\r\n                (error) => {                    \r\n                    // Setting loading to false and return the error\r\n                    setLoading(false)\r\n                    setMessage(resMessage(error))\r\n                }\r\n            )\r\n        } else {\r\n            loading(false)\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"input-field img-container\">\r\n                <img\r\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n                    alt=\"profile-img\"\r\n                    className=\"profile-img-card\"\r\n                />\r\n\r\n                <Form onSubmit={handleLogin} ref={form}>\r\n                    <label for='username'>Username</label>\r\n                    <div className='input-field'>\r\n                        <Input\r\n                            type=\"text\"\r\n                            // className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n\r\n                    <label for='password'>Password</label>\r\n                    <div className='input-field'>\r\n                        <Input\r\n                            type=\"password\"\r\n                            // className=\"form-control\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onChangePassword}\r\n                            validations={[required]}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn waves-effect waves-light\">\r\n                            <span>Login</span>\r\n                            <i class=\"material-icons right\">send</i>\r\n                        </button>   \r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className='input-field'>\r\n                            <div className='alert alert-danger' role='alert'>\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <CheckButton style={{display: 'none'}} ref={checkBtn}/>\r\n                    \r\n                    <div className=\"input-field\">\r\n                        <p>Not a member? <Link to=\"/register\">Sign Up</Link></p>           \r\n                    </div>\r\n                </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Search.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport mapboxgl from 'mapbox-gl';\r\n// import 'mapbox-gl/dist/mapbox-gl.css';\r\n// import SearchForm from \"./SearchForm\";\r\nimport SearchPopup from './SearchPopup'\r\nimport axios from \"axios\";\r\nimport Loading from './common/Loading';\r\nimport useSWR from \"swr\";\r\nimport { getOneLocation } from '../services/location.services'\r\n\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYmluYXJ5YmVhc3QiLCJhIjoiY2tpbTU3cW8xMHE1ZTJycXJkemdjZThmMSJ9.LUCLnUpyYjcUF48GPUEUVQ'\r\n\r\n\r\n  function Search(id, city) {\r\n    const [searchTerm, setSearchTerm] = useState(null)\r\n    const [zoom, setZoom] = useState(2.5)\r\n    const [center, setCenter] = useState([-104.9876, 39.7405])\r\n\r\n    const [searchCountry, setSearchCountry] = useState('')\r\n    const [searchRegion, setSearchRegion] = useState('')\r\n    const [searchCounty, setSearchCounty] = useState('')\r\n    const [searchCity, setSearchCity] = useState(city)\r\n    const [searchId, setSearchId] = useState(id)\r\n    const [searchLocation, setSearchLocation] = useState('')\r\n    const [searchUrl, setSearchUrl] = useState('https://disease.sh/v3/covid-19/jhucsse')\r\n    \r\n    const [message, setMessage] = useState('')\r\n\r\n    const mapContainerRef = useRef(null);\r\n    const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }))\r\n\r\n    useEffect(() => {\r\n        if(id.id !== null){\r\n          getOneLocation(id.id).then(response => {\r\n            setSearchLocation(response.data)\r\n            setSearchUrl(`https://disease.sh/v3/covid-19/jhucsse/counties/${response.data.county}`)\r\n            },\r\n            (error) => {\r\n                setMessage(error)\r\n                setSearchLocation(error)\r\n            }\r\n        )} else {\r\n          setSearchUrl('https://disease.sh/v3/covid-19/jhucsse')\r\n        }\r\n    },[id])\r\n\r\n    const fetcher = (url,city,state,county,country) => \r\n    fetch(url) \r\n      .then(r => r.json())\r\n      .then(data => {\r\n        if(id.id === null) {\r\n          return data.map((point, index) => ({\r\n                      type: \"Feature\",\r\n                      geometry: {\r\n                        type: \"Point\",\r\n                        coordinates: [\r\n                          point.coordinates.longitude,\r\n                          point.coordinates.latitude\r\n                        ]\r\n                      },\r\n                      properties: {\r\n                        id: index,\r\n                        country: point.country,\r\n                        province: point.province,\r\n                        county: point.county,\r\n                        cases: point.stats.confirmed,\r\n                        deaths: point.stats.deaths,\r\n                        recovered: point.stats.recovered\r\n                      }\r\n          }))\r\n        } else {\r\n          // console.log(data)\r\n          // data.forEach(point => {\r\n          //   if (searchLocation.state === point.province) {\r\n          let filteredData = data.filter(point => point.province === searchLocation.state)\r\n              // console.log(point) // it's pulling the right thing // why isn't it formatting?\r\n              return filteredData.map((point, index) => ({\r\n                type: \"Feature\",\r\n                geometry: {\r\n                  type: \"Point\",\r\n                  coordinates: [\r\n                    point.coordinates.longitude,\r\n                    point.coordinates.latitude\r\n                  ]\r\n                },\r\n                properties: {\r\n                  id: index,\r\n                  country: point.country,\r\n                  province: point.province,\r\n                  county: point.county,\r\n                  cases: point.stats.confirmed,\r\n                  deaths: point.stats.deaths,\r\n                  recovered: point.stats.recovered\r\n                }\r\n            }))\r\n          }\r\n\r\n        })\r\n      // }\r\n    // })\r\n\r\n  // Fetching our data with swr package\r\n  const { data } = useSWR(searchUrl, fetcher);\r\n\r\n    // const mapPoints = async () => {\r\n    //     const newFeaturesList = [];\r\n    //     function newList() {\r\n    //         const promise = axios.get(\"https://disease.sh/v3/covid-19/jhucsse\")\r\n    //         const dataPromise = promise.then((response) => \r\n    //         response.data)\r\n    //         return dataPromise\r\n    //     }\r\n    //     newList()\r\n    //         .then(data => {\r\n    //             data.map((point, index) => {\r\n    //                 newFeaturesList.push(point)\r\n    //                 console.log(\"Loading\")\r\n    //                 // console.log(\"@@@@@%^\", newFeaturesList[0])\r\n    //                 // console.log(\"data here\", point) \r\n                    \r\n    //                  return {\r\n                         \r\n    //                      type: \"Feature\",\r\n    //                      geometry: {\r\n    //                        type: \"Point\",\r\n    //                        coordinates: [\r\n    //                          point.coordinates.longitude,\r\n    //                          point.coordinates.latitude\r\n    //                        ]\r\n    //                      },\r\n    //                      properties: {\r\n    //                        id: index, // unique identifier in this case the index\r\n    //                        country: point.country,\r\n    //                        province: point.province,\r\n    //                        county: point.county,\r\n    //                        cases: point.stats.confirmed,\r\n    //                        deaths: point.stats.deaths,\r\n    //                        recovered: point.stats.recovered\r\n    //                      }\r\n    //                  }\r\n     \r\n    //              })\r\n    //         })\r\n        // }\r\n        // const newFeaturesList = axios.get(\"https://disease.sh/v3/covid-19/jhucsse\")\r\n        // .then(response => {\r\n\r\n            // response.data.map((point, index) => {\r\n            //    console.log(\"data here\", point) \r\n            //    console.log(\"@@@@@@\", newFeaturesList)\r\n            //     return {\r\n                    \r\n            //         type: \"Feature\",\r\n            //         geometry: {\r\n            //           type: \"Point\",\r\n            //           coordinates: [\r\n            //             point.coordinates.longitude,\r\n            //             point.coordinates.latitude\r\n            //           ]\r\n            //         },\r\n            //         properties: {\r\n            //           id: index, // unique identifier in this case the index\r\n            //           country: point.country,\r\n            //           province: point.province,\r\n            //           county: point.county,\r\n            //           cases: point.stats.confirmed,\r\n            //           deaths: point.stats.deaths,\r\n            //           recovered: point.stats.recovered\r\n            //         }\r\n            //     }\r\n\r\n            // })\r\n        // })\r\n        // console.log(\"we got mail\", newFeatureList)\r\n        // return  await newFeaturesList\r\n    \r\n\r\n    useEffect(() => {\r\n        if(data && data.length === 1) {\r\n          setCenter([data[0].geometry.coordinates[0], data[0].geometry.coordinates[1]]) // this all works, it's just very slow\r\n          setZoom(12)\r\n          // console.log(data[0].geometry.coordinates)\r\n        }\r\n        const map = new mapboxgl.Map({\r\n            container: mapContainerRef.current,\r\n            // See style options here: https://docs.mapbox.com/api/maps/#styles\r\n            style: 'mapbox://styles/binarybeast/ckjdljfpu6smv1ao028dmjh4r',\r\n            center: center,\r\n            zoom: zoom,\r\n          });\r\n\r\n\r\n        // add navigation control (the +/- zoom buttons)\r\n        map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\r\n\r\n        map.on('load', async () => {\r\n            // add the data source for new a feature collection with no features\r\n            map.addSource('Country-data', {\r\n                type: 'geojson',\r\n                data: {\r\n                    type: \"FeatureCollection\",\r\n                    features: data\r\n                },\r\n            });\r\n           \r\n            // now add the layer, and reference the data source above by name\r\n            map.addLayer({\r\n              id: 'country-data-layer',\r\n              source: 'Country-data',\r\n              type: 'symbol',\r\n              layout: {\r\n                // full list of icons here: https://labs.mapbox.com/maki-icons\r\n                'icon-image': 'marker-15',\r\n                'icon-padding': 0,\r\n                'icon-allow-overlap': true,\r\n              },\r\n            });\r\n          });\r\n\r\n          map.on('moveend', async () => {\r\n            // get new center coordinates\r\n            const { lng, lat } = map.getCenter();\r\n            // fetch new data\r\n            const results = await fetcher(lng, lat);\r\n            // update \"random-points-data\" source with new data\r\n            // all layers that consume the \"random-points-data\" data source will be updated automatically\r\n            console.log(\"---testing---\", results)\r\n            map.getSource('Country-data').setData({\r\n              type: 'FeatureCollection',\r\n              features: results});\r\n          });\r\n\r\n          map.on(\"click\", \"country-data-layer\", e => {\r\n            if (e.features.length) {\r\n              const feature = e.features[0];\r\n              // create popup node\r\n              const popupNode = document.createElement(\"div\");\r\n              ReactDOM.render(<SearchPopup feature={feature} />, popupNode);\r\n              // set popup on map\r\n              popUpRef.current\r\n                .setLngLat(feature.geometry.coordinates)\r\n                .setDOMContent(popupNode)\r\n                .addTo(map);\r\n            }\r\n          })\r\n\r\n        // clean up on unmount\r\n    return () => map.remove();\r\n    }, [data])\r\n    \r\n\r\n\r\n\r\n    return (\r\n      <>\r\n      <div className=\"map-container\" ref={mapContainerRef} />\r\n      </>\r\n      );\r\n  }\r\n\r\nexport default Search\r\n\r\n\r\n\r\n// // import React from \"react\"\r\n// import React, { useRef, useEffect, useState } from \"react\";\r\n// import useSWR from \"swr\";\r\n// //import component\r\n// import SearchForm from \"./SearchForm\";\r\n\r\n// //CSS\r\n// // import '../css/Search.css'\r\n\r\n// const mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\r\n\r\n// mapboxgl.accessToken = 'pk.eyJ1IjoiYmluYXJ5YmVhc3QiLCJhIjoiY2tpbTU3cW8xMHE1ZTJycXJkemdjZThmMSJ9.LUCLnUpyYjcUF48GPUEUVQ';\r\n\r\n// function Search() {\r\n//     const [searchTerm, setSearchTerm] = useState(null)\r\n//     const mapboxElRef = useRef(null);\r\n\r\n    \r\n//     const fetcher = (url,city,state,county,country) =>\r\n//     fetch(url) \r\n     \r\n//       .then(r => r.json())\r\n//       .then(data =>\r\n        \r\n//         data.map((point, index) => {\r\n//             // console.log(point)\r\n//             // i need to another if statement to check if the search terms matches\r\n//             if(searchTerm) {\r\n//                 return {\r\n//                     type: \"Feature\",\r\n//                     geometry: {\r\n//                       type: \"Point\",\r\n//                       coordinates: [\r\n//                         point.coordinates.longitude,\r\n//                         point.coordinates.latitude\r\n//                       ]\r\n//                     },\r\n//                     properties: {\r\n//                       id: index, // unique identifier in this case the index\r\n//                       country: point.country,\r\n//                       province: point.province,\r\n//                       county: point.county,\r\n//                       cases: point.stats.confirmed,\r\n//                       deaths: point.stats.deaths,\r\n//                       recovered: point.stats.recovered\r\n//                     }\r\n//             }\r\n//          } else {\r\n//                 return {\r\n//                     type: \"Feature\",\r\n//                     geometry: {\r\n//                       type: \"Point\",\r\n//                       coordinates: [\r\n//                         point.coordinates.longitude,\r\n//                         point.coordinates.latitude\r\n//                       ]\r\n//                     },\r\n//                     properties: {\r\n//                       id: index, // unique identifier in this case the index\r\n//                       country: point.country,\r\n//                       province: point.province,\r\n//                       county: point.county,\r\n//                       cases: point.stats.confirmed,\r\n//                       deaths: point.stats.deaths,\r\n//                       recovered: point.stats.recovered\r\n//                     }\r\n//             }\r\n            \r\n//         }})\r\n//       );\r\n\r\n//   // Fetching our data with swr package\r\n//   const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n    \r\n//     useEffect(() => {\r\n//         if (data) {\r\n//         // You can store the map instance with useRef too\r\n//         const map = new mapboxgl.Map({\r\n//           container: mapboxElRef.current,\r\n//           style: \"mapbox://styles/binarybeast/ckjdljfpu6smv1ao028dmjh4r\",\r\n//           center: [16, 27], // initial geo location\r\n//           zoom: 1.5 // initial zoom\r\n//         });\r\n\r\n//         map.addControl(new mapboxgl.NavigationControl());\r\n        \r\n//      // Call this method when the map is loaded\r\n//      map.once(\"load\", function() {\r\n//         // Add our SOURCE\r\n//         // with id \"points\"\r\n//         map.addSource(\"points\", {\r\n//           type: \"geojson\",\r\n//           data: {\r\n//             type: \"FeatureCollection\",\r\n//             features: data\r\n//           }\r\n//         });\r\n\r\n//         // Add our layer\r\n//         map.addLayer({\r\n//           id: \"circles\",\r\n//           source: \"points\", // this should be the id of the source\r\n//           type: \"circle\",\r\n//           // paint properties\r\n//           paint: {\r\n//             \"circle-opacity\": 0.75,\r\n//             \"circle-stroke-width\": 1,\r\n//             \"circle-radius\": 4,\r\n//             \"circle-color\": \"#FFEB3B\"\r\n//           }\r\n//         });\r\n//         // Create a mapbox popup\r\n// const popup = new mapboxgl.Popup({\r\n//     closeButton: true,\r\n//     closeOnClick: true\r\n//   });\r\n  \r\n//   // Variable to hold the active country/province on hover\r\n//   let lastId;\r\n  \r\n//   // Mouse move event\r\n//   map.on(\"mousemove\", \"circles\", e => {\r\n//     // Get the id from the properties\r\n//     const id = e.features[0].properties.id;\r\n  \r\n//     // Only if the id are different we process the tooltip\r\n//     if (id !== lastId) {\r\n//       lastId = id;\r\n  \r\n//       // Change the pointer type on move move\r\n//       map.getCanvas().style.cursor = \"pointer\";\r\n  \r\n//       const { cases, deaths, country, province,county,recovered } = e.features[0].properties;\r\n//       const coordinates = e.features[0].geometry.coordinates.slice();\r\n  \r\n//       // Get all data for the tooltip\r\n//       // const countryISO =\r\n//       //   lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\r\n  \r\n//       const provinceHTML =\r\n//         province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n  \r\n//         const cityHTML =\r\n//         county !== \"null\" ? `<p>City: <b>${county}</b></p>` : \"\";\r\n//       const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n  \r\n//       // const countryFlagHTML = Boolean(countryISO)\r\n//       //   ? `<img src=\"https://www.countryflags.io/flat/${countryISO}/64.png\"></img>`\r\n//       //   : \"\";\r\n  \r\n//       const HTML = `<p>Country: <b>${country}</b></p>\r\n//                 ${provinceHTML}\r\n//                 ${cityHTML}\r\n//                 <p>Cases: <b>${cases}</b></p>\r\n//                 <p>Recovered: <b>${recovered}</b></p>\r\n//                 <p>Deaths: <b>${deaths}</b></p>\r\n//                 <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n//                `;\r\n  \r\n//       // Ensure that if the map is zoomed out such that multiple\r\n//       // copies of the feature are visible, the popup appears\r\n//       // over the copy being pointed to.\r\n//       while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n//         coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n//       }\r\n  \r\n//       popup\r\n//         .setLngLat(coordinates)\r\n//         .setHTML(HTML)\r\n//         .addTo(map);\r\n//     }\r\n//   });\r\n  \r\n//   // Mouse leave event\r\n//   map.on(\"mouseleave\", \"circles\", function() {\r\n//     // Reset the last Id\r\n//     lastId = undefined;\r\n//     map.getCanvas().style.cursor = \"\";\r\n//     popup.remove();\r\n//   });\r\n//       });\r\n//     }\r\n\r\n    \r\n//   }, [data]);\r\n\r\n    \r\n//     return (\r\n//       <>\r\n//             <div className='container'>\r\n//                 <h1>Covid-19 Cases</h1>\r\n//                 < SearchForm />\r\n//             </div>\r\n//         <div className=\"App container\">\r\n//           <div className=\"mapContainer\">\r\n//             {/* Assigned Mapbox container */}\r\n//             <div className=\"mapBox\" ref={mapboxElRef} />\r\n//           </div>\r\n//         </div>\r\n//       </>\r\n//       );\r\n//     }\r\n\r\n// export default Search","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Home.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchForm.js",["141","142"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { Link } from 'react-router-dom'\r\nimport CheckButton from 'react-validation/build/button'\r\n\r\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\r\n\r\n//Components\r\n// import FormGroup from \"./common/FormGroup\"\r\nimport Loading from './common/Loading'\r\nimport Search from './Search'\r\n\r\n//Helper\r\nimport { locationSearch, addToSearchHistory } from '../services/location.services'\r\nimport { getHistory, removeFromSearchHistory } from '../services/user.service'\r\nimport { resMessage } from '../utilities/functions.utilities'\r\n// import searchTerm from './Search'\r\n\r\n//CSS\r\n// import '../css/SearchForm.css'\r\n\r\nconst axios = require('axios')\r\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\r\n\r\n//Function given to react-validator\r\nconst required = (value) => {\r\n    if(!value){\r\n        return (\r\n            <div className='alert alert-danger' role='alert'>\r\n                This field is required!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst SearchForm = (props) => {\r\n    const form = useRef()\r\n    const checkBtn = useRef()\r\n\r\n    const [message, setMessage] = useState('')\r\n    const [successful, setSuccessful] = useState(false)\r\n    const [country, setCountry] = useState('')\r\n    const [region, setRegion] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [id, setId] = useState(null)\r\n    const [searchHistory, setSearchHistory] = useState(undefined)\r\n\r\n    const[loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getHistory().then(history => setSearchHistory(history))\r\n    },[])\r\n    \r\n    const onChangeCountry = (val) => {\r\n        console.log(val)\r\n        setCountry(val)\r\n    }\r\n\r\n    const onChangeRegion = (val) => {\r\n        console.log(val)\r\n        setRegion(val)\r\n    }\r\n\r\n    const onChangeCity = (e) => {\r\n        const city = e.target.value\r\n        console.log(city)\r\n        setCity(city)\r\n    }\r\n\r\n\r\n    const mapSearch = async (e) => {\r\n        //Prevent reload of pressing the button\r\n        e.preventDefault()\r\n        //Prevent message clear them out\r\n        setMessage('')\r\n        setSuccessful(false)\r\n\r\n        // validtes all the fields in your form\r\n        form.current.validateAll()\r\n        \r\n        // Validator stores errors and we can check if errors exist\r\n        \r\n        if(checkBtn.current.context._errors.length === 0) {\r\n            //Google API request\r\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\r\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\r\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\r\n            locationSearch(country, region, city, county).then(\r\n                (response) => {\r\n                    // console.log(response)\r\n                        if(response.data[0]) {\r\n                            setId(response.data[0]._id)\r\n                            addToSearchHistory(response.data[0]._id)\r\n                        } else {\r\n                            setId(response.data._id)\r\n                            addToSearchHistory(response.data._id)\r\n                        }\r\n                    if(searchHistory && searchHistory.length > 19) {removeFromSearchHistory()}\r\n                    setMessage(response.data.message)\r\n                    setSuccessful(true)\r\n                    // console.log(response.data)\r\n                    // console.log(\"country:\", country)\r\n                    // console.log(\"region:\", region)\r\n                    // console.log(\"city:\", city)\r\n                    // console.log(\"county:\", county)\r\n                    // console.log(\"id:\", id)\r\n                    // searchTerm(apiResponse.data.results)\r\n                },\r\n                (error) => {\r\n                    setMessage(resMessage(error))\r\n                    setSuccessful(false)\r\n                }\r\n            )\r\n\r\n        } else {\r\n            setSuccessful(false)\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n            <div className='form-container container'>\r\n                <Form onSubmit={mapSearch} ref={form} className='container'>\r\n                <div className='input-field'>\r\n                    <CountryDropdown\r\n                        className='browser-default'\r\n                        value={country}\r\n                        onChange={(val) => onChangeCountry(val)} />\r\n                </div>\r\n                <div className='input-field'>\r\n                    <RegionDropdown\r\n                        className='browser-default'\r\n                        country={country}\r\n                        value={region}\r\n                        onChange={(val) => onChangeRegion(val)} />\r\n                </div>\r\n                <label>City</label>\r\n                <div className='input-field'>\r\n                        <Input\r\n                            type='text'\r\n                            className='form-control'\r\n                            name='city'\r\n                            value={city}\r\n                            placeholder='City'\r\n                            onChange={onChangeCity}\r\n                            validations={[required]}\r\n                        />               \r\n                </div>\r\n\r\n                    <Loading text='Search' loading={loading} />\r\n\r\n                    {message && (\r\n                        <div className='input-field'>\r\n                            <div className={successful ? 'alert alert-success' : 'alert alert-danger'} role='alert'>\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <CheckButton style={{display: 'none'}} ref={checkBtn}/>\r\n                <div className='input-field'>\r\n                    {id && (\r\n                        <Link to={`/search/${id}`}>Go to Details</Link>\r\n                    )}\r\n                </div>\r\n                </Form>\r\n                <Search id={id}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\About.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Admin.js",["143"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { getAllUsers } from '../services/user.service'\r\nimport {resMessage} from '../utilities/functions.utilities'\r\n\r\nconst Admin = () => {\r\n    const [users, setUsers] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        getAllUsers().then(response => {\r\n            setUsers(response.data)\r\n            },\r\n            (error) => {\r\n                setMessage(resMessage(error))\r\n                setUsers(error);\r\n              }\r\n        )\r\n    },[])\r\n    return(\r\n        <>\r\n            {users ? (\r\n                <div className='container'>\r\n                    <h2>All Users</h2>\r\n                    {/* {console.log(users)} */}\r\n                    {users.length > 0 ? (\r\n                        <>\r\n                            {users.map(user => (\r\n                                <div key={user._id} className='row'>\r\n                                    <div className='col s12'>\r\n                                        <div className='card'>\r\n                                            <div className='card-content'>\r\n                                                <span className='card-title'>\r\n                                                    <Link to={`/admin/users/${user._id}`}>\r\n                                                        <h4>{user.username}</h4>\r\n                                                    </Link>    \r\n                                                </span>\r\n                                                <p>{user.email}</p>\r\n                                                {user.primaryLocation && \r\n                                                <p>\r\n                                                    {user.primaryLocation.city},{' '}\r\n                                                    {user.primaryLocation.state},{' '} \r\n                                                    {user.primaryLocation.county}{' '}-{' '}\r\n                                                    {user.primaryLocation.country}\r\n                                                </p>}\r\n                                                {user.roles && \r\n                                                    user.roles.map(role => <p key={role._id}>{role.name}</p>)\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <div>No Users to Show!</div>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className='progress'>\r\n                    <span className='indeterminate'></span>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Admin","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Signup.js",["144"],"import React, { useState, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport CheckButton from 'react-validation/build/button'\r\nimport { isEmail } from \"validator\"\r\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\r\n\r\n//Helper\r\nimport { register, login } from '../services/auth.service'\r\nimport { resMessage } from '../utilities/functions.utilities'\r\n\r\nconst axios = require('axios')\r\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\r\n\r\n//Function given to react-validator\r\nconst required = (value) => {\r\n    if(!value){\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                This field is required!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Function that validates username\r\nconst vusername = (value) => {\r\n    if(value.length < 3 || value.length >= 20) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Your username must be between 3 and 20 characters\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Function that validates passwords\r\nconst vpassword = (value) => {\r\n    if(value.length < 6 || value.length >= 40) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Your password must be between 6 and 40 characters\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst validEmail = (value) => {\r\n    if(!isEmail) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Submitted e-mail not valid\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Register = (props) => {\r\n    const form = useRef()\r\n    const checkBtn = useRef()\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [successful, setSuccessful] = useState(false)\r\n    const [country, setCountry] = useState('')\r\n    const [region, setRegion] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    \r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value\r\n        setUsername(username)\r\n    }\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value\r\n        setPassword(password)\r\n    }\r\n\r\n    const onChangeEmail = (e) => {\r\n        const email = e.target.value\r\n        setEmail(email)\r\n    }\r\n\r\n    const onChangeCountry = (val) => {\r\n        console.log(val)\r\n        setCountry(val)\r\n    }\r\n\r\n    const onChangeRegion = (val) => {\r\n        console.log(val)\r\n        setRegion(val)\r\n    }\r\n\r\n    const onChangeCity = (e) => {\r\n        const city = e.target.value\r\n        console.log(city)\r\n        setCity(city)\r\n    }\r\n\r\n    const handleSignup = async (e) => {\r\n        //Prevent reload of pressing the button\r\n        e.preventDefault()\r\n        //Prevent message clear them out\r\n        setMessage(\"\")\r\n        setSuccessful(false)\r\n        //delay for 2 seconds then switch to the login page\r\n        \r\n        \r\n        // validtes all the fields in your form\r\n        form.current.validateAll()\r\n        \r\n        // Validator stores errors and we can check if errors exist\r\n        \r\n        if(checkBtn.current.context._errors.length === 0) {\r\n            //Google API request\r\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\r\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\r\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\r\n            register(username, email, password, country, region, city, county).then(\r\n                (response) => {\r\n                    setMessage(response.data.message)\r\n                    setSuccessful(true)\r\n                    // console.log(\"COUNTY AFTER REGISTER\", county)\r\n                    login(username, password).then(\r\n                        ()=> {\r\n                            props.history.push(\"/dashboard\")\r\n                            window.location.reload()\r\n                        },\r\n                        (error) => {\r\n                            // Checking all the data received from our backend\r\n                            \r\n                            // Setting loading to false and return the error\r\n                            setLoading(false)\r\n                            setMessage(resMessage(error))\r\n                        }\r\n                    )\r\n                },\r\n                (error) => {\r\n                    setMessage(resMessage(error))\r\n                    setSuccessful(false)\r\n                }\r\n            )\r\n\r\n        } else {\r\n            successful(false)\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"input-field img-container\">\r\n                    <img\r\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n                        alt=\"profile-img\"\r\n                        className=\"profile-img-card\"\r\n                    />\r\n                </div>\r\n                <Form onSubmit={handleSignup} ref={form} className=\"form\">\r\n                        <label for='username'>Username</label>\r\n                        <div className='input-field'>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                                value={username}\r\n                                placeholder=\"Username\"\r\n                                onChange={onChangeUsername}\r\n                                validations={[required, vusername]}\r\n                            />\r\n                            \r\n                        </div>\r\n\r\n                        <label for=\"email\">Email</label>\r\n                        <div className='input-field'>\r\n                            <Input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                value={email}\r\n                                placeholder=\"Email\"\r\n                                onChange={onChangeEmail}\r\n                                validations={[required, validEmail]}\r\n                            />\r\n                        </div>\r\n\r\n                        <label for='password'>Password</label>\r\n                        <div className='input-field'>\r\n                            <Input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                value={password}\r\n                                placeholder=\"Password\"\r\n                                onChange={onChangePassword}\r\n                                validations={[required, vpassword]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <CountryDropdown\r\n                                className=\"browser-default\"\r\n                                value={country}\r\n                                onChange={(val) => onChangeCountry(val)} />\r\n                        </div>\r\n\r\n                        <div className=\"input-field\">\r\n                            <RegionDropdown\r\n                                className=\"browser-default\"\r\n                                country={country}\r\n                                value={region}\r\n                                onChange={(val) => onChangeRegion(val)} />\r\n                        </div>\r\n\r\n                        <label for='city'>City</label>\r\n                        <div className='input-field'>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"city\"\r\n                                value={city}\r\n                                placeholder=\"City\"\r\n                                onChange={onChangeCity}\r\n                                validations={[required]}\r\n                            />\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"input-field\">\r\n                            <button className=\"btn waves-effect waves-light\">\r\n                                <span>Sign Up</span>\r\n                                <i class=\"material-icons right\">send</i>\r\n                            </button>   \r\n                        </div>\r\n\r\n\r\n                        {message && (\r\n                            <div className=\"input-field\">\r\n                                <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\r\n                                    {message}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\r\n\r\n                        <div className=\"input-field\">\r\n                            <p>Already a member? <Link to=\"/login\">Log In</Link></p>          \r\n                        </div>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Profile.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\UserDetail.js",["145","146"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { useParams } from 'react-router-dom'\r\nimport { getOneUser, getRoles, addUserRoles, removeUserRoles, deleteUser } from '../services/user.service'\r\n\r\nconst UserDetail = (props) => {\r\n    const form = useRef()\r\n    const [user, setUser] = useState('')\r\n    const [roles, setRoles] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    let { id } = useParams()\r\n\r\n    const handleAddRole = (event) => {\r\n        event.preventDefault()\r\n        let roleId = event.target.roleId.value\r\n        let roleName = event.target.roleName.value\r\n        const newRole =\r\n            {\r\n                _id: roleId, \r\n                name: roleName\r\n            }\r\n        // console.log(newRole)\r\n        addUserRoles(id,newRole)\r\n        .then(response => {\r\n            setMessage(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => setMessage(err))\r\n    }\r\n\r\n    const handleRemoveRole = (event) => {\r\n        event.preventDefault()\r\n        let roleId = event.target.roleId.value\r\n        let roleName = event.target.roleName.value\r\n        const newRole =\r\n            {\r\n                _id: roleId, \r\n                name: roleName\r\n            }\r\n        // console.log(newRole)\r\n        removeUserRoles(id,newRole)\r\n        .then(response => {\r\n            setMessage(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => setMessage(err))\r\n    }\r\n\r\n    const handleDelete = e => {\r\n        e.preventDefault()\r\n        deleteUser(id)\r\n        .then(\r\n            ()=> {\r\n                props.history.push('/admin')\r\n                window.location.reload()\r\n            }\r\n        )\r\n        .catch(err => {setMessage(err)})\r\n        // console.log(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOneUser(id).then(response => {\r\n            setUser(response.data)\r\n            },\r\n            (error) => {\r\n                setMessage(error)\r\n                setUser(error)\r\n              }\r\n        )\r\n        getRoles().then(response => {\r\n            setRoles(response.data)\r\n            },\r\n            (error) => {\r\n                setMessage(error)\r\n                setRoles(error);\r\n              }\r\n        )\r\n    },[])\r\n    \r\n    return(\r\n        <div className='container'>\r\n            {user ? (\r\n                <div className='row'>\r\n                    <div className='col s12'>\r\n                        <div className='card'>\r\n                            <div className='card-content'>\r\n                            <span className='card-title'><h3>{user.username}</h3></span>\r\n                                <p>{user.email}</p>\r\n                                {user.primaryLocation && \r\n                                <p>\r\n                                    {user.primaryLocation.city},{' '}\r\n                                    {user.primaryLocation.state},{' '} \r\n                                    {user.primaryLocation.county}{' '}-{' '}\r\n                                    {user.primaryLocation.country}\r\n                                </p>}\r\n                                <Form onSubmit={handleDelete} ref={form}>\r\n                                    <Input type='submit' value='Delete User' className='card-action'/>\r\n                                </Form>\r\n                                {user.roles && \r\n                                    user.roles.map(role => \r\n                                    <div key={role._id}>\r\n                                        {/* <p>{role.name}</p> */}\r\n                                        <Form onSubmit={handleRemoveRole} ref={form}>\r\n                                            <Input type='hidden' value={role._id} name='roleId'/>\r\n                                            <Input type='hidden' value={role.name} name='roleName'/>\r\n                                            <Input \r\n                                                type='submit'  \r\n                                                value={`Remove ${role.name.slice(0,1).toUpperCase()+ role.name.slice(1,role.name.length)} Role`} \r\n                                                className='card-action'\r\n                                            />\r\n                                        </Form>\r\n                                    </div>)\r\n                                }\r\n                                {/* {console.log(user)} */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className='progress'>\r\n                    <span className='indeterminate'></span>\r\n                </div>\r\n            )}\r\n            {roles ? (\r\n                <div>\r\n                    <div className='row'>\r\n                        <div className='col s12'>\r\n                            <div className='card'>\r\n                                <div className='card-content'>\r\n                                    <span className='card-title'><h4>Add Roles</h4></span>\r\n                                        {/* {console.log(roles)} */}\r\n                                        {roles.length > 0 ? (\r\n                                            <div>\r\n                                                {/* {console.log(user.roles)} */}\r\n                                                    {roles.map(role => (\r\n                                                        <>\r\n                                                            {(user.roles && user.roles.some(existing => existing._id === role._id)) ? (\r\n                                                                <></>\r\n                                                            ) : (\r\n                                                                <div key={role._id}>\r\n                                                                    {/* <p>{role.name}</p> */}\r\n                                                                    <Form onSubmit={handleAddRole} ref={form}>\r\n                                                                        <Input type='hidden' value={role._id} name='roleId'/>\r\n                                                                        <Input type='hidden' value={role.name} name='roleName'/>\r\n                                                                        <Input \r\n                                                                            type='submit'  \r\n                                                                            value={`Add ${role.name.slice(0,1).toUpperCase()+ role.name.slice(1,role.name.length)} Role`} \r\n                                                                            className='card-action'\r\n                                                                        />\r\n                                                                    </Form>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </>\r\n                                                    )\r\n                                                )}\r\n                                                \r\n                                        </div>\r\n                                    ) : (\r\n                                        <div>No roles to display!</div>\r\n                                    )\r\n                                }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className='progress'>\r\n                    <span className='indeterminate'></span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UserDetail","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Layout.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Dashboard.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Statistics.js",["147","148"],"import React, { useState, useEffect } from 'react'\r\nimport DeathsGraph from './DeathsGraph'\r\nimport CasesGraph from './CasesGraph'\r\nimport '../css/Statistics.css'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\nconst Statistics = ({newCountry, newCounty, newRegion}) => {\r\n    //Location states\r\n    const [country, setCountry] = useState(newCountry)\r\n    const [county, setCounty] = useState(newCounty)\r\n    const [region, setRegion] = useState(newRegion)\r\n    //API Stats states\r\n    const [confirmedCases, setConfirmedCases] = useState('')\r\n    const [deaths, setDeaths] = useState('')\r\n    const [recovered, setRecovered] = useState('')\r\n    const [updatedAt, setUpdatedAt] = useState('')\r\n    const [historicalDates, setHistoricalDates] = useState([])\r\n    const [historicalCases, setHistoricalCases] = useState([])\r\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\r\n    const [dayFilter, setDayFilter] = useState(30)\r\n\r\n    const onChangeDayFilter = (event, val) => {\r\n        setDayFilter(val)\r\n        console.log(dayFilter)\r\n    }\r\n    \r\n    useEffect(()=> {\r\n        if(newCounty !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${newCounty}`)\r\n            .then(response => {\r\n                response.data.forEach(data=> {\r\n                    if(newRegion === data.province) {\r\n                        setCountry(data.country)\r\n                        setCounty(data.county)\r\n                        setRegion(data.province)\r\n                        setConfirmedCases(data.stats.confirmed)\r\n                        setDeaths(data.stats.deaths)\r\n                        setRecovered(data.stats.recovered)\r\n                        setUpdatedAt(data.updatedAt)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [newCountry, newCounty, newRegion, country, county, region])\r\n\r\n\r\n    useEffect(() => {\r\n        if(region !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=${dayFilter}`)\r\n            .then(response => {\r\n                response.data.forEach(data => {\r\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\r\n                        setHistoricalDates(Object.keys(data.timeline.cases))\r\n                        setHistoricalCases(Object.values(data.timeline.cases))\r\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [region, dayFilter, newCountry, newCounty, newRegion])\r\n\r\n\r\n    return(\r\n        <div className='container'>\r\n            <div className='row'>\r\n                <div className='col s12'>\r\n                    <div className='card'>\r\n                        <p>Country: {country}</p>\r\n                        <p>County: {county}</p>\r\n                        <p>State: {region}</p>\r\n                        <p>Confirmed Cases: {confirmedCases}</p>\r\n                        <p>Deaths: {deaths}</p>\r\n                        <p>Last Updated: {updatedAt}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='row graph-container'>\r\n                    <ul>\r\n                        <button onClick={e => onChangeDayFilter(e, 7)} className='waves-effect waves-light btn-small'>7 Days</button>\r\n                        <button onClick={e => onChangeDayFilter(e, 30)} className='waves-effect waves-light btn-small'>30 Days</button>\r\n                        <button onClick={e => onChangeDayFilter(e, \"all\")} className='waves-effect waves-light btn-small'>All</button>\r\n                    </ul>\r\n\r\n                    <CasesGraph dates={historicalDates} cases={historicalCases} />\r\n                    <DeathsGraph dates={historicalDates} deaths={historicalDeaths} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Statistics","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Loading.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchPopup.js",["149","150"],"import React from \"react\";\r\n\r\nconst SearchPopup = ({ feature }) => {\r\n  const { id, country, province, county, cases, deaths, recovered } = feature.properties;  \r\n\r\n  return (\r\n    <div id={`popup-${id}`}>\r\n      <>\r\n      {/* yes, apparently 'null' is a string here */}\r\n        {county!='null' ? (\r\n            <h6>{county}, {province}, {country}</h6>\r\n        ) : (\r\n            <h6>{province}, {country}</h6>\r\n        )}\r\n      <p>Cases: {cases}</p>\r\n      <p>Deaths: {deaths}</p>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPopup;","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\StatisticsTable.js",["151"],"import React, { useState, useEffect } from 'react'\r\nimport { getFavorites, removeFavorite } from '../services/user.service'\r\nimport MaterialTable from \"material-table\";\r\nimport '../css/StatisticsTable.css'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\nconst StatisticsTable = ({onChangeStatistics}) => {\r\n    const [gridTable, setGridTable] = useState({\r\n        resolve: () => {}\r\n    })\r\n    const [gridData, setGridData] = useState([])\r\n\r\n    const onRowDelete = oldData =>\r\n        new Promise((resolve, reject) => {\r\n            const dataID = oldData._id\r\n            removeFavorite(dataID).then(response => {\r\n                console.log(response)\r\n            })\r\n            console.log(dataID)\r\n            let data = [...gridTable.data];\r\n            const index = data.indexOf(oldData);\r\n            data.splice(index, 1);\r\n            const updatedAt = new Date();\r\n            setGridTable({ ...gridTable, data, updatedAt, resolve });\r\n        })\r\n    \r\n    const onRowEdit = oldData =>\r\n    new Promise((resolve, reject) => {\r\n        const dataID = oldData._id\r\n        console.log(dataID)\r\n        // let data = [...gridTable.data];\r\n        // const index = data.indexOf(oldData);\r\n        // data.splice(index, 1);\r\n        // const updatedAt = new Date();\r\n        // setGridTable({ ...gridTable, data, updatedAt, resolve });\r\n    })\r\n\r\n\r\n    //Get favorites and set state\r\n    useEffect(() => {\r\n        let localGridData\r\n        //Get Favorites data\r\n        getFavorites().then(response => {\r\n            localGridData = response\r\n            response.forEach((favoritesData, index) => {\r\n                console.log(favoritesData)\r\n                const favoritesRegion = favoritesData.state\r\n                console.log(favoritesRegion)\r\n                //Make API call with favorites data county\r\n                axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${favoritesData.county}`)\r\n                .then(response => {\r\n                    // Loop through API response and get the data for the county\r\n                    response.data.forEach((countyData) => {\r\n                        //Check if favorites state matches returned array of API response state\r\n                        if(countyData.province === favoritesRegion) {\r\n                            //merges the favorite location object with API response data\r\n                            let merged = Object.assign({}, localGridData[index], countyData.stats)\r\n                            setGridData(prevArray => [...prevArray, merged])\r\n                        }\r\n                    })\r\n                })\r\n\r\n            })\r\n        })\r\n    },[])\r\n\r\n    useEffect(()=> {\r\n        console.log(\"FINALY GRID DATA:\", gridData)\r\n        setGridTable({\r\n            data: gridData,\r\n            columns: [\r\n                {\r\n                    title: \"id\",\r\n                    field: \"_id\",\r\n                    hidden: true,\r\n                },\r\n                {\r\n                    title: \"City\",\r\n                    field: \"city\",\r\n                },\r\n                {\r\n                    title: \"County\",\r\n                    field: \"county\",\r\n                },\r\n                {\r\n                    title: \"State\",\r\n                    field: \"state\",\r\n                },\r\n                {\r\n                    title: \"Country\",\r\n                    field: \"country\",\r\n                },\r\n                {\r\n                    title: \"Confirmed Cases\",\r\n                    field: \"confirmed\",\r\n                },\r\n                {\r\n                    title: \"Confirmed Deaths\",\r\n                    field: \"deaths\",\r\n                },\r\n            ],\r\n            resolve: () => {}\r\n\r\n        })\r\n    }, [gridData])\r\n\r\n    //Run resolve for table\r\n    useEffect(() => {\r\n        gridTable.resolve()\r\n    }, [gridData, gridTable])\r\n\r\n    return (\r\n        <div className='row stats-container'>\r\n            <div className='col s12'>\r\n                <MaterialTable\r\n                    title=\"Favorited Locations\"\r\n                    className='stats-table'\r\n                    data={gridTable.data}\r\n                    columns={gridTable.columns}\r\n                    editable={{\r\n                        deletable: rowData => true,\r\n                        onRowDelete: onRowDelete\r\n                    }}\r\n                    options={{ search: true, paging: false, filtering: true, exportButton: true }}\r\n                    localization={{\r\n                        header: {\r\n                            actions: \"Actions\"\r\n                        },\r\n                        body: {\r\n                            editRow: {\r\n                                deleteText: \"Are you sure you want to remove this favorited location?\"\r\n                            },\r\n                            deleteTooltip: \"Remove from favorite location\",\r\n                        },\r\n                    }}\r\n                    onRowClick={(event, rowData, ) => onChangeStatistics(rowData.county, rowData.state, rowData.country)}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatisticsTable","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\location.services.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\user.service.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\auth.service.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\functions.utilities.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\CasesGraph.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\DeathsGraph.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\authHeader.utilities.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\localStorage.utilities.js",[],["152","153"],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":14},{"ruleId":"158","severity":1,"message":"162","line":17,"column":12,"nodeType":"160","messageId":"161","endLine":17,"endColumn":19},{"ruleId":"163","severity":1,"message":"164","line":40,"column":7,"nodeType":"165","endLine":40,"endColumn":9,"suggestions":"166"},{"ruleId":"158","severity":1,"message":"167","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":15},{"ruleId":"158","severity":1,"message":"168","line":7,"column":8,"nodeType":"160","messageId":"161","endLine":7,"endColumn":13},{"ruleId":"158","severity":1,"message":"167","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":15},{"ruleId":"158","severity":1,"message":"169","line":18,"column":12,"nodeType":"160","messageId":"161","endLine":18,"endColumn":22},{"ruleId":"158","severity":1,"message":"170","line":18,"column":24,"nodeType":"160","messageId":"161","endLine":18,"endColumn":37},{"ruleId":"158","severity":1,"message":"171","line":22,"column":12,"nodeType":"160","messageId":"161","endLine":22,"endColumn":25},{"ruleId":"158","severity":1,"message":"172","line":22,"column":27,"nodeType":"160","messageId":"161","endLine":22,"endColumn":43},{"ruleId":"158","severity":1,"message":"173","line":23,"column":12,"nodeType":"160","messageId":"161","endLine":23,"endColumn":24},{"ruleId":"158","severity":1,"message":"174","line":23,"column":26,"nodeType":"160","messageId":"161","endLine":23,"endColumn":41},{"ruleId":"158","severity":1,"message":"175","line":24,"column":12,"nodeType":"160","messageId":"161","endLine":24,"endColumn":24},{"ruleId":"158","severity":1,"message":"176","line":24,"column":26,"nodeType":"160","messageId":"161","endLine":24,"endColumn":41},{"ruleId":"158","severity":1,"message":"177","line":25,"column":12,"nodeType":"160","messageId":"161","endLine":25,"endColumn":22},{"ruleId":"158","severity":1,"message":"178","line":25,"column":24,"nodeType":"160","messageId":"161","endLine":25,"endColumn":37},{"ruleId":"158","severity":1,"message":"179","line":26,"column":12,"nodeType":"160","messageId":"161","endLine":26,"endColumn":20},{"ruleId":"158","severity":1,"message":"180","line":26,"column":22,"nodeType":"160","messageId":"161","endLine":26,"endColumn":33},{"ruleId":"158","severity":1,"message":"162","line":30,"column":12,"nodeType":"160","messageId":"161","endLine":30,"endColumn":19},{"ruleId":"163","severity":1,"message":"181","line":252,"column":8,"nodeType":"165","endLine":252,"endColumn":14,"suggestions":"182"},{"ruleId":"158","severity":1,"message":"183","line":7,"column":43,"nodeType":"160","messageId":"161","endLine":7,"endColumn":60},{"ruleId":"158","severity":1,"message":"184","line":50,"column":20,"nodeType":"160","messageId":"161","endLine":50,"endColumn":30},{"ruleId":"158","severity":1,"message":"162","line":9,"column":12,"nodeType":"160","messageId":"161","endLine":9,"endColumn":19},{"ruleId":"158","severity":1,"message":"185","line":71,"column":12,"nodeType":"160","messageId":"161","endLine":71,"endColumn":19},{"ruleId":"158","severity":1,"message":"162","line":11,"column":12,"nodeType":"160","messageId":"161","endLine":11,"endColumn":19},{"ruleId":"163","severity":1,"message":"164","line":80,"column":7,"nodeType":"165","endLine":80,"endColumn":9,"suggestions":"186"},{"ruleId":"158","severity":1,"message":"187","line":17,"column":12,"nodeType":"160","messageId":"161","endLine":17,"endColumn":21},{"ruleId":"163","severity":1,"message":"188","line":62,"column":8,"nodeType":"165","endLine":62,"endColumn":61,"suggestions":"189"},{"ruleId":"158","severity":1,"message":"187","line":4,"column":57,"nodeType":"160","messageId":"161","endLine":4,"endColumn":66},{"ruleId":"190","severity":1,"message":"191","line":10,"column":16,"nodeType":"192","messageId":"193","endLine":10,"endColumn":18},{"ruleId":"158","severity":1,"message":"194","line":29,"column":11,"nodeType":"160","messageId":"161","endLine":29,"endColumn":20},{"ruleId":"154","replacedBy":"195"},{"ruleId":"156","replacedBy":"196"},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["199"],"'Loading' is defined but never used.","'axios' is defined but never used.","'searchTerm' is assigned a value but never used.","'setSearchTerm' is assigned a value but never used.","'searchCountry' is assigned a value but never used.","'setSearchCountry' is assigned a value but never used.","'searchRegion' is assigned a value but never used.","'setSearchRegion' is assigned a value but never used.","'searchCounty' is assigned a value but never used.","'setSearchCounty' is assigned a value but never used.","'searchCity' is assigned a value but never used.","'setSearchCity' is assigned a value but never used.","'searchId' is assigned a value but never used.","'setSearchId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'center', 'fetcher', and 'zoom'. Either include them or remove the dependency array.",["200"],"'CountryRegionData' is defined but never used.","'setLoading' is assigned a value but never used.","'loading' is assigned a value but never used.",["201"],"'recovered' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'county'. Either include it or remove the dependency array.",["202"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'onRowEdit' is assigned a value but never used.",["197"],["198"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"203","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [id]",{"range":"210","text":"211"},"Update the dependencies array to be: [center, data, fetcher, zoom]",{"range":"212","text":"213"},{"range":"214","text":"211"},"Update the dependencies array to be: [region, dayFilter, newCountry, newCounty, newRegion, county]",{"range":"215","text":"216"},[1406,1408],"[id]",[9791,9797],"[center, data, fetcher, zoom]",[2366,2368],[2540,2593],"[region, dayFilter, newCountry, newCounty, newRegion, county]"]