<<<<<<< HEAD
[{"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\index.js":"1","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\App.js":"2","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\About.js":"3","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchDetail.js":"4","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Home.js":"5","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Login.js":"6","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Admin.js":"7","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Search.js":"8","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Profile.js":"9","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Dashboard.js":"10","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\UserDetail.js":"11","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Layout.js":"12","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Signup.js":"13","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\FormGroup.js":"14","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Statistics.js":"15","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\auth.service.js":"16","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\user.service.js":"17","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\functions.utilities.js":"18","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchForm.js":"19","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\location.services.js":"20","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\DeathsGraph.js":"21","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\CasesGraph.js":"22","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\localStorage.utilities.js":"23","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\authHeader.utilities.js":"24","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\StatisticsCopy.js":"25"},{"size":323,"mtime":1609646050998,"results":"26","hashOfConfig":"27"},{"size":1529,"mtime":1609732460069,"results":"28","hashOfConfig":"27"},{"size":162,"mtime":1609644719518,"results":"29","hashOfConfig":"27"},{"size":3753,"mtime":1609812650610,"results":"30","hashOfConfig":"27"},{"size":205,"mtime":1609642226424,"results":"31","hashOfConfig":"27"},{"size":4065,"mtime":1609640434964,"results":"32","hashOfConfig":"27"},{"size":2267,"mtime":1609623961342,"results":"33","hashOfConfig":"27"},{"size":7740,"mtime":1609738535347,"results":"34","hashOfConfig":"27"},{"size":1067,"mtime":1609402605776,"results":"35","hashOfConfig":"27"},{"size":5768,"mtime":1609812650609,"results":"36","hashOfConfig":"27"},{"size":5742,"mtime":1609738535348,"results":"37","hashOfConfig":"27"},{"size":2770,"mtime":1609732460072,"results":"38","hashOfConfig":"27"},{"size":8230,"mtime":1609809372748,"results":"39","hashOfConfig":"27"},{"size":303,"mtime":1609376227973,"results":"40","hashOfConfig":"27"},{"size":3680,"mtime":1609642219040,"results":"41","hashOfConfig":"27"},{"size":1194,"mtime":1609376227974,"results":"42","hashOfConfig":"27"},{"size":3077,"mtime":1609818392022,"results":"43","hashOfConfig":"27"},{"size":259,"mtime":1609376227974,"results":"44","hashOfConfig":"27"},{"size":6196,"mtime":1609818392021,"results":"45","hashOfConfig":"27"},{"size":1038,"mtime":1609818392022,"results":"46","hashOfConfig":"27"},{"size":731,"mtime":1609625041040,"results":"47","hashOfConfig":"27"},{"size":734,"mtime":1609625041039,"results":"48","hashOfConfig":"27"},{"size":442,"mtime":1609376227975,"results":"49","hashOfConfig":"27"},{"size":359,"mtime":1609402605778,"results":"50","hashOfConfig":"27"},{"size":3869,"mtime":1609812650611,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"10jbua5",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"54"},"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\index.js",[],["113","114"],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\App.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\About.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchDetail.js",["115"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { getOneLocation } from '../services/location.services'\r\nimport { addFavorite, getFavorites, removeFavorite } from '../services/user.service'\r\nimport { getCurrentUser } from '../services/auth.service'\r\n\r\nimport StatisticsCopy from './StatisticsCopy'\r\n\r\nconst SearchDetail = () => {\r\n    const form = useRef()\r\n    const [location, setLocation] = useState('')\r\n    const [currentUser, setCurrentUser] = useState(undefined)\r\n    const [favoriteLocations, setFavoriteLocations] = useState([])\r\n    let { id } = useParams()\r\n\r\n    useEffect(() => {\r\n        getOneLocation(id).then(response => {\r\n            setLocation(response.data)\r\n            },\r\n            (error) => {\r\n                const _error =\r\n                    (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setLocation(_error);\r\n              }\r\n        )\r\n        const user = getCurrentUser()\r\n        if(user) {\r\n            setCurrentUser(user)\r\n            getFavorites().then(favorites => setFavoriteLocations(favorites))\r\n        }\r\n    },[])\r\n\r\n    const handleAddFavorite = e => {\r\n        e.preventDefault()\r\n        let user = currentUser.id\r\n        let id = e.target.id.value\r\n\r\n        addFavorite(user,id)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const handleRemove = event => {\r\n        event.preventDefault()\r\n        let user = currentUser.id\r\n        let id = (event.target.id.value)\r\n\r\n        removeFavorite(user, id)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {location ? (\r\n                <div>\r\n                    <h3>{location.city}, {location.state} - {location.country}</h3>\r\n                    {currentUser ? (\r\n                        <>\r\n                        {(favoriteLocations.length > 0 && favoriteLocations.some(existing => existing._id === location._id)) ? (\r\n                            <Form ref={form} onSubmit={handleRemove}>\r\n                                <Input type='hidden' value={location._id} name='id'/>\r\n                                <Input type='submit' value='Remove from Favorite Locations' name='submit'/>\r\n                            </Form>\r\n                        ) : (\r\n                            <Form ref={form} onSubmit={handleAddFavorite}>\r\n                                <Input type='hidden' value={location._id} name='id'/>\r\n                                <Input type='submit' value='Add to Favorite Locations' name='submit'/>\r\n                            </Form>\r\n                        )}\r\n                        </>\r\n                    ) : (\r\n                        <div><Link to='/login'>Login</Link> or <Link to='/register'>Register</Link> to add to favorite locations!</div>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )}\r\n            <StatisticsCopy\r\n                newCountry={location.country}\r\n                newCounty={location.county}\r\n                newRegion={location.state}\r\n             />\r\n            <div>\r\n                <Link to='/search'>Back to Map</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchDetail","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Home.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Login.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Admin.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Search.js",["116"],"// import React from \"react\"\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport useSWR from \"swr\";\r\n//import component\r\nimport SearchForm from \"./SearchForm\";\r\n\r\n//CSS\r\n// import '../css/Search.css'\r\n\r\nconst mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYmluYXJ5YmVhc3QiLCJhIjoiY2tpbTU3cW8xMHE1ZTJycXJkemdjZThmMSJ9.LUCLnUpyYjcUF48GPUEUVQ';\r\n\r\nfunction Search() {\r\n    const [searchTerm, setSearchTerm] = useState(null)\r\n    const mapboxElRef = useRef(null);\r\n\r\n    \r\n    const fetcher = (url,city,state,county,country) =>\r\n    fetch(url) \r\n     \r\n      .then(r => r.json())\r\n      .then(data =>\r\n        \r\n        data.map((point, index) => {\r\n            // console.log(point)\r\n            // i need to another if statement to check if the search terms matches\r\n            if(searchTerm) {\r\n                return {\r\n                    type: \"Feature\",\r\n                    geometry: {\r\n                      type: \"Point\",\r\n                      coordinates: [\r\n                        point.coordinates.longitude,\r\n                        point.coordinates.latitude\r\n                      ]\r\n                    },\r\n                    properties: {\r\n                      id: index, // unique identifier in this case the index\r\n                      country: point.country,\r\n                      province: point.province,\r\n                      county: point.county,\r\n                      cases: point.stats.confirmed,\r\n                      deaths: point.stats.deaths,\r\n                      recovered: point.stats.recovered\r\n                    }\r\n            }\r\n         } else {\r\n                return {\r\n                    type: \"Feature\",\r\n                    geometry: {\r\n                      type: \"Point\",\r\n                      coordinates: [\r\n                        point.coordinates.longitude,\r\n                        point.coordinates.latitude\r\n                      ]\r\n                    },\r\n                    properties: {\r\n                      id: index, // unique identifier in this case the index\r\n                      country: point.country,\r\n                      province: point.province,\r\n                      county: point.county,\r\n                      cases: point.stats.confirmed,\r\n                      deaths: point.stats.deaths,\r\n                      recovered: point.stats.recovered\r\n                    }\r\n            }\r\n            \r\n        }})\r\n      );\r\n\r\n  // Fetching our data with swr package\r\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\r\n    \r\n    useEffect(() => {\r\n        if (data) {\r\n        // You can store the map instance with useRef too\r\n        const map = new mapboxgl.Map({\r\n          container: mapboxElRef.current,\r\n          style: \"mapbox://styles/binarybeast/ckjdljfpu6smv1ao028dmjh4r\",\r\n          center: [16, 27], // initial geo location\r\n          zoom: 1.5 // initial zoom\r\n        });\r\n\r\n        map.addControl(new mapboxgl.NavigationControl());\r\n        \r\n     // Call this method when the map is loaded\r\n     map.once(\"load\", function() {\r\n        // Add our SOURCE\r\n        // with id \"points\"\r\n        map.addSource(\"points\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: data\r\n          }\r\n        });\r\n\r\n        // Add our layer\r\n        map.addLayer({\r\n          id: \"circles\",\r\n          source: \"points\", // this should be the id of the source\r\n          type: \"circle\",\r\n          // paint properties\r\n          paint: {\r\n            \"circle-opacity\": 0.75,\r\n            \"circle-stroke-width\": 1,\r\n            \"circle-radius\": 4,\r\n            \"circle-color\": \"#FFEB3B\"\r\n          }\r\n        });\r\n        // Create a mapbox popup\r\nconst popup = new mapboxgl.Popup({\r\n    closeButton: true,\r\n    closeOnClick: true\r\n  });\r\n  \r\n  // Variable to hold the active country/province on hover\r\n  let lastId;\r\n  \r\n  // Mouse move event\r\n  map.on(\"mousemove\", \"circles\", e => {\r\n    // Get the id from the properties\r\n    const id = e.features[0].properties.id;\r\n  \r\n    // Only if the id are different we process the tooltip\r\n    if (id !== lastId) {\r\n      lastId = id;\r\n  \r\n      // Change the pointer type on move move\r\n      map.getCanvas().style.cursor = \"pointer\";\r\n  \r\n      const { cases, deaths, country, province,county,recovered } = e.features[0].properties;\r\n      const coordinates = e.features[0].geometry.coordinates.slice();\r\n  \r\n      // Get all data for the tooltip\r\n      // const countryISO =\r\n      //   lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\r\n  \r\n      const provinceHTML =\r\n        province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\r\n  \r\n        const cityHTML =\r\n        county !== \"null\" ? `<p>City: <b>${county}</b></p>` : \"\";\r\n      const mortalityRate = ((deaths / cases) * 100).toFixed(2);\r\n  \r\n      // const countryFlagHTML = Boolean(countryISO)\r\n      //   ? `<img src=\"https://www.countryflags.io/flat/${countryISO}/64.png\"></img>`\r\n      //   : \"\";\r\n  \r\n      const HTML = `<p>Country: <b>${country}</b></p>\r\n                ${provinceHTML}\r\n                ${cityHTML}\r\n                <p>Cases: <b>${cases}</b></p>\r\n                <p>Recovered: <b>${recovered}</b></p>\r\n                <p>Deaths: <b>${deaths}</b></p>\r\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\r\n               `;\r\n  \r\n      // Ensure that if the map is zoomed out such that multiple\r\n      // copies of the feature are visible, the popup appears\r\n      // over the copy being pointed to.\r\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n      }\r\n  \r\n      popup\r\n        .setLngLat(coordinates)\r\n        .setHTML(HTML)\r\n        .addTo(map);\r\n    }\r\n  });\r\n  \r\n  // Mouse leave event\r\n  map.on(\"mouseleave\", \"circles\", function() {\r\n    // Reset the last Id\r\n    lastId = undefined;\r\n    map.getCanvas().style.cursor = \"\";\r\n    popup.remove();\r\n  });\r\n      });\r\n    }\r\n\r\n    \r\n  }, [data]);\r\n\r\n    \r\n    return (\r\n      <>\r\n            <div className='container'>\r\n                <h1>Covid-19 Cases</h1>\r\n                < SearchForm />\r\n            </div>\r\n        <div className=\"App container\">\r\n          <div className=\"mapContainer\">\r\n            {/* Assigned Mapbox container */}\r\n            <div className=\"mapBox\" ref={mapboxElRef} />\r\n          </div>\r\n        </div>\r\n      </>\r\n      );\r\n    }\r\n\r\nexport default Search\r\n\r\n// class Search extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//         lng: 5,\r\n//         lat: 34,\r\n//         zoom: 2\r\n//         };\r\n//     }\r\n\r\n\r\n\r\n    // componentDidMount() {\r\n    //     const map = new mapboxgl.Map({\r\n    //     container: this.mapContainer,\r\n    //     style: 'mapbox://styles/mapbox/streets-v11',\r\n    //     center: [16, 27], // initial geo location\r\n    //     zoom: 2\r\n    //     });\r\n    //     map.on('move', () => {\r\n    //         this.setState({\r\n    //         lng: map.getCenter().lng.toFixed(4),\r\n    //         lat: map.getCenter().lat.toFixed(4),\r\n    //         zoom: map.getZoom().toFixed(2)\r\n    //         });\r\n    //         });\r\n    //     }\r\n    //     render() {\r\n    //         return (\r\n    //         <div>\r\n    //             <h1>Covid Results</h1>\r\n    //         <div className='sidebarStyle'>\r\n    //         <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\r\n    //         </div>\r\n    //         <div ref={el => this.mapContainer = el} className='mapContainer' />\r\n    //         </div>\r\n    //         )\r\n    //         }\r\n    //         }","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Profile.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Dashboard.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\UserDetail.js",["117"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { useParams } from 'react-router-dom'\r\nimport { getOneUser, getRoles, addUserRoles, removeUserRoles, deleteUser } from '../services/user.service'\r\n\r\nconst UserDetail = (props) => {\r\n    const form = useRef()\r\n    const [user, setUser] = useState('')\r\n    const [roles, setRoles] = useState('')\r\n    let { id } = useParams()\r\n\r\n    const handleAddRole = (event) => {\r\n        event.preventDefault()\r\n        let roleId = event.target.roleId.value\r\n        let roleName = event.target.roleName.value\r\n        const newRole =\r\n            {\r\n                _id: roleId, \r\n                name: roleName\r\n            }\r\n        // console.log(newRole)\r\n        addUserRoles(id,newRole)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const handleRemoveRole = (event) => {\r\n        event.preventDefault()\r\n        let roleId = event.target.roleId.value\r\n        let roleName = event.target.roleName.value\r\n        const newRole =\r\n            {\r\n                _id: roleId, \r\n                name: roleName\r\n            }\r\n        // console.log(newRole)\r\n        removeUserRoles(id,newRole)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            window.location.reload()\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const handleDelete = e => {\r\n        e.preventDefault()\r\n        deleteUser(id)\r\n        .then(\r\n            ()=> {\r\n                props.history.push('/admin')\r\n                window.location.reload()\r\n            }\r\n        )\r\n        .catch(err => {console.log(err)})\r\n        console.log(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOneUser(id).then(response => {\r\n            setUser(response.data)\r\n            },\r\n            (error) => {\r\n                const _error =\r\n                    (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setUser(_error);\r\n              }\r\n        )\r\n        getRoles().then(response => {\r\n            setRoles(response.data)\r\n            },\r\n            (error) => {\r\n                const _error =\r\n                    (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setRoles(_error);\r\n              }\r\n        )\r\n    },[])\r\n    \r\n    return(\r\n        <>\r\n            {user ? (\r\n                <div>\r\n                    <h1>{user.username}</h1>\r\n                    <p>{user.email}</p>\r\n                    {user.primaryLocation && \r\n                    <p>\r\n                        {user.primaryLocation.city},{' '}\r\n                        {user.primaryLocation.state},{' '} \r\n                        {user.primaryLocation.county}{' '}-{' '}\r\n                        {user.primaryLocation.country}\r\n                    </p>}\r\n                    <Form onSubmit={handleDelete} ref={form}>\r\n                        <Input type='submit' value='Delete User' />\r\n                    </Form>\r\n                    {user.roles && \r\n                        user.roles.map(role => \r\n                        <div key={role._id}>\r\n                            <p>{role.name}</p>\r\n                            <Form onSubmit={handleRemoveRole} ref={form}>\r\n                                <Input type='hidden' value={role._id} name='roleId'/>\r\n                                <Input type='hidden' value={role.name} name='roleName'/>\r\n                                <Input type='submit'  value='Remove Role'/>\r\n                            </Form>\r\n                        </div>)\r\n                    }\r\n                    {/* {console.log(user)} */}\r\n                </div>\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )}\r\n            {roles ? (\r\n                <div>\r\n                    <h4>Add Roles</h4>\r\n                {/* {console.log(roles)} */}\r\n                {roles.length > 0 ? (\r\n                    <div>\r\n                        {console.log(user.roles)}\r\n                            {roles.map(role => (\r\n                                <>\r\n                                    {(user.roles && user.roles.some(existing => existing._id === role._id)) ? (\r\n                                        <></>\r\n                                    ) : (\r\n                                        <div key={role._id}>\r\n                                            <p>{role.name}</p>\r\n                                            <Form onSubmit={handleAddRole} ref={form}>\r\n                                                <Input type='hidden' value={role._id} name='roleId'/>\r\n                                                <Input type='hidden' value={role.name} name='roleName'/>\r\n                                                <Input type='submit'  value='Add Role'/>\r\n                                            </Form>\r\n                                        </div>\r\n                                    )}\r\n                                </>\r\n                            )\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <div>No roles to display!</div>\r\n                )\r\n            }\r\n                </div>\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default UserDetail","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\Layout.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Signup.js",["118","119","120"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport CheckButton from 'react-validation/build/button'\r\nimport { isEmail } from \"validator\"\r\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\r\n\r\n//Components\r\nimport FormGroup from \"./common/FormGroup\"\r\n\r\n//Helper\r\nimport { register, login } from '../services/auth.service'\r\nimport { resMessage } from '../utilities/functions.utilities'\r\n\r\nconst axios = require('axios')\r\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\r\n\r\n//Function given to react-validator\r\nconst required = (value) => {\r\n    if(!value){\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                This field is required!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Function that validates username\r\nconst vusername = (value) => {\r\n    if(value.length < 3 || value.length >= 20) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Your username must be between 3 and 20 characters\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Function that validates passwords\r\nconst vpassword = (value) => {\r\n    if(value.length < 6 || value.length >= 40) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Your password must be between 6 and 40 characters\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst validEmail = (value) => {\r\n    if(!isEmail) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Submitted e-mail not valid\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Register = (props) => {\r\n    const form = useRef()\r\n    const checkBtn = useRef()\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [successful, setSuccessful] = useState(false)\r\n    const [country, setCountry] = useState('')\r\n    const [region, setRegion] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    \r\n    const onChangeUsername = (e) => {\r\n        const username = e.target.value\r\n        setUsername(username)\r\n    }\r\n\r\n    const onChangePassword = (e) => {\r\n        const password = e.target.value\r\n        setPassword(password)\r\n    }\r\n\r\n    const onChangeEmail = (e) => {\r\n        const email = e.target.value\r\n        setEmail(email)\r\n    }\r\n\r\n    const onChangeCountry = (val) => {\r\n        console.log(val)\r\n        setCountry(val)\r\n    }\r\n\r\n    const onChangeRegion = (val) => {\r\n        console.log(val)\r\n        setRegion(val)\r\n    }\r\n\r\n    const onChangeCity = (e) => {\r\n        const city = e.target.value\r\n        console.log(city)\r\n        setCity(city)\r\n    }\r\n\r\n    const handleSignup = async (e) => {\r\n        //Prevent reload of pressing the button\r\n        e.preventDefault()\r\n        //Prevent message clear them out\r\n        setMessage(\"\")\r\n        setSuccessful(false)\r\n\r\n        // validtes all the fields in your form\r\n        form.current.validateAll()\r\n        \r\n        // Validator stores errors and we can check if errors exist\r\n        \r\n        if(checkBtn.current.context._errors.length === 0) {\r\n            //Google API request\r\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\r\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\r\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\r\n            register(username, email, password, country, region, city, county).then(\r\n                (response) => {\r\n                    setMessage(response.data.message)\r\n                    setSuccessful(true)\r\n                    console.log(\"COUNTY AFTER REGISTER\", county)\r\n                    login(username, password).then(\r\n                        ()=> {\r\n                            props.history.push(\"/dashboard\")\r\n                            window.location.reload()\r\n                        },\r\n                        (error) => {\r\n                            // Checking all the data received from our backend\r\n                            \r\n                            // Setting loading to false and return the error\r\n                            setLoading(false)\r\n                            setMessage(resMessage(error))\r\n                        }\r\n                    )\r\n                },\r\n                (error) => {\r\n                    setMessage(resMessage(error))\r\n                    setSuccessful(false)\r\n                }\r\n            )\r\n\r\n        } else {\r\n            successful(false)\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"container\">\r\n                <img\r\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n                    alt=\"profile-img\"\r\n                    className=\"profile-img-card\"\r\n                />\r\n                <Form onSubmit={handleSignup} ref={form}>\r\n\r\n                    <FormGroup text=\"username\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            validations={[required, vusername]}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup text=\"email\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={onChangeEmail}\r\n                            validations={[required, validEmail]}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup text=\"password\">\r\n                        <Input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onChangePassword}\r\n                            validations={[required, vpassword]}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <CountryDropdown\r\n                        className=\"browser-default\"\r\n                        value={country}\r\n                        onChange={(val) => onChangeCountry(val)} />\r\n                    <RegionDropdown\r\n                        className=\"browser-default\"\r\n                        country={country}\r\n                        value={region}\r\n                        onChange={(val) => onChangeRegion(val)} />\r\n\r\n                    <FormGroup text=\"city\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"city\"\r\n                            value={city}\r\n                            onChange={onChangeCity}\r\n                            validations={[required]}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <div className=\"form-group\">\r\n                        <button className=\"btn\" >\r\n                            <span>Sign Up</span>\r\n                        </button>   \r\n                    </div>\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\common\\FormGroup.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\Statistics.js",["121","122"],"import React, { useState, useEffect } from 'react'\r\nimport { getPrimaryLocation } from '../services/user.service'\r\nimport { getCurrentUser } from '../services/auth.service'\r\nimport DeathsGraph from './DeathsGraph'\r\nimport CasesGraph from './CasesGraph'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\nconst Statistics = () => {\r\n    const [primaryLocation, setPrimaryLocation] = useState({})\r\n    //Location states\r\n    const [country, setCountry] = useState('')\r\n    const [county, setCounty] = useState('')\r\n    const [region, setRegion] = useState('')\r\n    //API Stats states\r\n    const [confirmedCases, setConfirmedCases] = useState('')\r\n    const [deaths, setDeaths] = useState('')\r\n    const [recovered, setRecovered] = useState('')\r\n    const [updatedAt, setUpdatedAt] = useState('')\r\n    const [historicalDates, setHistoricalDates] = useState([])\r\n    const [historicalCases, setHistoricalCases] = useState([])\r\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\r\n    const [dayFilter, setDayFilter] = useState(30)\r\n\r\n    const onChangeDayFilter = (event, val) => {\r\n        setDayFilter(val)\r\n        console.log(dayFilter)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        getPrimaryLocation()\r\n        .then(response => {\r\n            setPrimaryLocation(response)\r\n        })\r\n    }, [])\r\n    \r\n\r\n    useEffect(()=> {\r\n        if(primaryLocation.county !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${primaryLocation.county}`)\r\n            .then(response => {\r\n                response.data.forEach(data=> {\r\n                    if(primaryLocation.state === data.province) {\r\n                        setCountry(data.country)\r\n                        setCounty(data.county)\r\n                        setRegion(data.province)\r\n                        setConfirmedCases(data.stats.confirmed)\r\n                        setDeaths(data.stats.deaths)\r\n                        setRecovered(data.stats.recovered)\r\n                        setUpdatedAt(data.updatedAt)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [primaryLocation])\r\n\r\n\r\n    useEffect(() => {\r\n        if(region !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=${dayFilter}`)\r\n            .then(response => {\r\n                response.data.forEach(data => {\r\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\r\n                        setHistoricalDates(Object.keys(data.timeline.cases))\r\n                        setHistoricalCases(Object.values(data.timeline.cases))\r\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [region, dayFilter])\r\n\r\n\r\n    return(\r\n        <div>\r\n            Statistics\r\n            <p>Country: {country}</p>\r\n            <p>County: {county}</p>\r\n            <p>State: {region}</p>\r\n            <p>Confirmed Cases: {confirmedCases}</p>\r\n            <p>Deaths: {deaths}</p>\r\n            <p>Recovered: {recovered}</p>\r\n            <p>Last Updated: {updatedAt}</p>\r\n            <h3>Filters: </h3>\r\n            <ul>\r\n                <button onClick={e => onChangeDayFilter(e, 7)}>7 Days</button>\r\n                <button onClick={e => onChangeDayFilter(e, 30)}>30 Days</button>\r\n                <button onClick={e => onChangeDayFilter(e, \"all\")}>All</button>\r\n            </ul>\r\n\r\n            <CasesGraph dates={historicalDates} cases={historicalCases} />\r\n            <DeathsGraph dates={historicalDates} deaths={historicalDeaths} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Statistics",["123","124"],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\auth.service.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\user.service.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\functions.utilities.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\SearchForm.js",["125","126"],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\services\\location.services.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\DeathsGraph.js",["127","128"],"import React, { useState, useEffect } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst CasesGraph = ({dates, deaths}) => {\r\n    const data = {\r\n        labels: dates,\r\n        datasets: [\r\n          {\r\n            label: \"Confirmed Deaths\",\r\n            data: deaths,\r\n            fill: true,\r\n            backgroundColor: \"rgba(255,0,0,0.2)\",\r\n            borderColor: \"rgba(255,0,0,1)\"\r\n          }\r\n        ]\r\n      };\r\n    \r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: \"Confirmed Cases\"\r\n          }\r\n    }\r\n\r\n    return(\r\n        <div className=\"cases-graph\">\r\n            <Line data={data} options={options}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CasesGraph","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\CasesGraph.js",["129","130"],"import React, { useState, useEffect } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nconst CasesGraph = ({dates, cases}) => {\r\n    const data = {\r\n        labels: dates,\r\n        datasets: [\r\n          {\r\n            label: \"Confirmed Cases\",\r\n            data: cases,\r\n            fill: true,\r\n            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n            borderColor: \"rgba(75,192,192,1)\"\r\n          }\r\n        ]\r\n      };\r\n    \r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: \"Confirmed Cases\"\r\n          }\r\n    }\r\n\r\n    return(\r\n        <div className=\"cases-graph\">\r\n            <Line data={data} options={options}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CasesGraph","C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\localStorage.utilities.js",[],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\utilities\\authHeader.utilities.js",[],["131","132"],"C:\\Users\\ecgue\\Documents\\General_Assembly\\Unit_3\\Project 3\\team-6-frontend\\src\\components\\StatisticsCopy.js",["133","134","135"],"import React, { useState, useEffect } from 'react'\r\nimport { getPrimaryLocation } from '../services/user.service'\r\nimport { getCurrentUser } from '../services/auth.service'\r\nimport DeathsGraph from './DeathsGraph'\r\nimport CasesGraph from './CasesGraph'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\nconst StatisticsCopy = ({newCountry, newCounty, newRegion}) => {\r\n    // const [primaryLocation, setPrimaryLocation] = useState({})\r\n    //Location states\r\n    const [country, setCountry] = useState(newCountry)\r\n    const [county, setCounty] = useState(newCounty)\r\n    const [region, setRegion] = useState(newRegion)\r\n    //API Stats states\r\n    const [confirmedCases, setConfirmedCases] = useState('')\r\n    const [deaths, setDeaths] = useState('')\r\n    const [recovered, setRecovered] = useState('')\r\n    const [updatedAt, setUpdatedAt] = useState('')\r\n    const [historicalDates, setHistoricalDates] = useState([])\r\n    const [historicalCases, setHistoricalCases] = useState([])\r\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\r\n    const [dayFilter, setDayFilter] = useState(30)\r\n\r\n    const onChangeDayFilter = (event, val) => {\r\n        setDayFilter(val)\r\n        console.log(dayFilter)\r\n    }\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     getPrimaryLocation()\r\n    //     .then(response => {\r\n    //         setPrimaryLocation(response)\r\n    //     })\r\n    // }, [])\r\n    \r\n\r\n    useEffect(()=> {\r\n        // if(primaryLocation.county !== undefined) {\r\n        if(newCounty !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${newCounty}`)\r\n            .then(response => {\r\n                response.data.forEach(data=> {\r\n                    // if(primaryLocation.state === data.province) {\r\n                    if(newRegion === data.province) {\r\n                        setCountry(data.country)\r\n                        setCounty(data.county)\r\n                        setRegion(data.province)\r\n                        setConfirmedCases(data.stats.confirmed)\r\n                        setDeaths(data.stats.deaths)\r\n                        setRecovered(data.stats.recovered)\r\n                        setUpdatedAt(data.updatedAt)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [newCountry, newCounty, newRegion])\r\n\r\n\r\n    useEffect(() => {\r\n        if(region !== undefined) {\r\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=${dayFilter}`)\r\n            .then(response => {\r\n                response.data.forEach(data => {\r\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\r\n                        setHistoricalDates(Object.keys(data.timeline.cases))\r\n                        setHistoricalCases(Object.values(data.timeline.cases))\r\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }, [region, dayFilter])\r\n\r\n\r\n    return(\r\n        <div>\r\n            Statistics\r\n            <p>Country: {country}</p>\r\n            <p>County: {county}</p>\r\n            <p>State: {region}</p>\r\n            <p>Confirmed Cases: {confirmedCases}</p>\r\n            <p>Deaths: {deaths}</p>\r\n            <p>Recovered: {recovered}</p>\r\n            <p>Last Updated: {updatedAt}</p>\r\n            <h3>Filters: </h3>\r\n            <ul>\r\n                <button onClick={e => onChangeDayFilter(e, 7)}>7 Days</button>\r\n                <button onClick={e => onChangeDayFilter(e, 30)}>30 Days</button>\r\n                <button onClick={e => onChangeDayFilter(e, \"all\")}>All</button>\r\n            </ul>\r\n\r\n            <CasesGraph dates={historicalDates} cases={historicalCases} />\r\n            <DeathsGraph dates={historicalDates} deaths={historicalDeaths} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default StatisticsCopy",{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":37,"column":7,"nodeType":"142","endLine":37,"endColumn":9,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":15,"column":24,"nodeType":"146","messageId":"147","endLine":15,"endColumn":37},{"ruleId":"140","severity":1,"message":"141","line":89,"column":7,"nodeType":"142","endLine":89,"endColumn":9,"suggestions":"148"},{"ruleId":"144","severity":1,"message":"149","line":1,"column":35,"nodeType":"146","messageId":"147","endLine":1,"endColumn":44},{"ruleId":"144","severity":1,"message":"150","line":6,"column":43,"nodeType":"146","messageId":"147","endLine":6,"endColumn":60},{"ruleId":"144","severity":1,"message":"151","line":73,"column":12,"nodeType":"146","messageId":"147","endLine":73,"endColumn":19},{"ruleId":"144","severity":1,"message":"152","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":24},{"ruleId":"140","severity":1,"message":"153","line":73,"column":8,"nodeType":"142","endLine":73,"endColumn":27,"suggestions":"154"},{"ruleId":"136","replacedBy":"155"},{"ruleId":"138","replacedBy":"156"},{"ruleId":"144","severity":1,"message":"150","line":7,"column":43,"nodeType":"146","messageId":"147","endLine":7,"endColumn":60},{"ruleId":"144","severity":1,"message":"157","line":16,"column":8,"nodeType":"146","messageId":"147","endLine":16,"endColumn":18},{"ruleId":"144","severity":1,"message":"158","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"144","severity":1,"message":"158","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"136","replacedBy":"159"},{"ruleId":"138","replacedBy":"160"},{"ruleId":"144","severity":1,"message":"161","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":28},{"ruleId":"144","severity":1,"message":"152","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":24},{"ruleId":"140","severity":1,"message":"153","line":75,"column":8,"nodeType":"142","endLine":75,"endColumn":27,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["165"],"no-unused-vars","'setSearchTerm' is assigned a value but never used.","Identifier","unusedVar",["166"],"'useEffect' is defined but never used.","'CountryRegionData' is defined but never used.","'loading' is assigned a value but never used.","'getCurrentUser' is defined but never used.","React Hook useEffect has a missing dependency: 'county'. Either include it or remove the dependency array.",["167"],["163"],["164"],"'searchTerm' is defined but never used.","'useState' is defined but never used.",["163"],["164"],"'getPrimaryLocation' is defined but never used.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"169","fix":"171"},{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},"Update the dependencies array to be: [id]",{"range":"175","text":"176"},{"range":"177","text":"176"},"Update the dependencies array to be: [region, dayFilter, county]",{"range":"178","text":"179"},{"range":"180","text":"179"},[1391,1393],"[id]",[2745,2747],[2786,2805],"[region, dayFilter, county]",[2971,2990]]
=======
[{"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/index.js":"1","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/App.js":"2","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/About.js":"3","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Signup.js":"4","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Dashboard.js":"5","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Admin.js":"6","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Profile.js":"7","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Search.js":"8","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Home.js":"9","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Login.js":"10","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/UserDetail.js":"11","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Layout.js":"12","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/FormGroup.js":"13","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/auth.service.js":"14","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/functions.utilities.js":"15","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchForm.js":"16","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/user.service.js":"17","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/DeathsGraph.js":"18","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/CasesGraph.js":"19","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/localStorage.utilities.js":"20","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/authHeader.utilities.js":"21","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/location.services.js":"22","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchDetail.js":"23","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Statistics.js":"24"},{"size":304,"mtime":1609647560227,"results":"25","hashOfConfig":"26"},{"size":1481,"mtime":1609821565099,"results":"27","hashOfConfig":"26"},{"size":154,"mtime":1609647560224,"results":"28","hashOfConfig":"26"},{"size":7990,"mtime":1609821557463,"results":"29","hashOfConfig":"26"},{"size":5564,"mtime":1609822695820,"results":"30","hashOfConfig":"26"},{"size":2208,"mtime":1609625163665,"results":"31","hashOfConfig":"26"},{"size":1031,"mtime":1609615204809,"results":"32","hashOfConfig":"26"},{"size":7497,"mtime":1609821565100,"results":"33","hashOfConfig":"26"},{"size":190,"mtime":1609643471174,"results":"34","hashOfConfig":"26"},{"size":3937,"mtime":1609643471175,"results":"35","hashOfConfig":"26"},{"size":5582,"mtime":1609821565102,"results":"36","hashOfConfig":"26"},{"size":2691,"mtime":1609821565102,"results":"37","hashOfConfig":"26"},{"size":292,"mtime":1609365186864,"results":"38","hashOfConfig":"26"},{"size":1151,"mtime":1609372513809,"results":"39","hashOfConfig":"26"},{"size":251,"mtime":1609365055429,"results":"40","hashOfConfig":"26"},{"size":6022,"mtime":1609821565110,"results":"41","hashOfConfig":"26"},{"size":2868,"mtime":1609821762768,"results":"42","hashOfConfig":"26"},{"size":698,"mtime":1609615667064,"results":"43","hashOfConfig":"26"},{"size":701,"mtime":1609615667063,"results":"44","hashOfConfig":"26"},{"size":426,"mtime":1609365083485,"results":"45","hashOfConfig":"26"},{"size":347,"mtime":1609536329668,"results":"46","hashOfConfig":"26"},{"size":995,"mtime":1609822227143,"results":"47","hashOfConfig":"26"},{"size":3639,"mtime":1609822767680,"results":"48","hashOfConfig":"26"},{"size":6737,"mtime":1609822728203,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1xnegec",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/index.js",[],["107","108"],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/App.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/About.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Signup.js",["109","110","111"],"import React, { useState, useRef, useEffect } from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\nimport { isEmail } from \"validator\"\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n//Components\nimport FormGroup from \"./common/FormGroup\"\n\n//Helper\nimport { register, login } from '../services/auth.service'\nimport { resMessage } from '../utilities/functions.utilities'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        )\n    }\n}\n\n//Function that validates username\nconst vusername = (value) => {\n    if(value.length < 3 || value.length >= 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your username must be between 3 and 20 characters\n            </div>\n        )\n    }\n}\n\n//Function that validates passwords\nconst vpassword = (value) => {\n    if(value.length < 6 || value.length >= 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your password must be between 6 and 40 characters\n            </div>\n        )\n    }\n}\n\nconst validEmail = (value) => {\n    if(!isEmail) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Submitted e-mail not valid\n            </div>\n        )\n    }\n}\n\nconst Register = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n    const [loading, setLoading] = useState(false)\n    \n    const onChangeUsername = (e) => {\n        const username = e.target.value\n        setUsername(username)\n    }\n\n    const onChangePassword = (e) => {\n        const password = e.target.value\n        setPassword(password)\n    }\n\n    const onChangeEmail = (e) => {\n        const email = e.target.value\n        setEmail(email)\n    }\n\n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n    const handleSignup = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage(\"\")\n        setSuccessful(false)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            register(username, email, password, country, region, city, county).then(\n                (response) => {\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    console.log(\"COUNTY AFTER REGISTER\", county)\n                    login(username, password).then(\n                        ()=> {\n                            props.history.push(\"/dashboard\")\n                            window.location.reload()\n                        },\n                        (error) => {\n                            // Checking all the data received from our backend\n                            \n                            // Setting loading to false and return the error\n                            setLoading(false)\n                            setMessage(resMessage(error))\n                        }\n                    )\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            successful(false)\n        }\n\n\n    }\n\n\n    return(\n        <div>\n            <div className=\"container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Form onSubmit={handleSignup} ref={form}>\n\n                    <FormGroup text=\"username\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            validations={[required, vusername]}\n                        />\n                    </FormGroup>\n\n                    <FormGroup text=\"email\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"email\"\n                            value={email}\n                            onChange={onChangeEmail}\n                            validations={[required, validEmail]}\n                        />\n                    </FormGroup>\n\n                    <FormGroup text=\"password\">\n                        <Input\n                            type=\"password\"\n                            className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={onChangePassword}\n                            validations={[required, vpassword]}\n                        />\n                    </FormGroup>\n\n                    <CountryDropdown\n                        className=\"browser-default\"\n                        value={country}\n                        onChange={(val) => onChangeCountry(val)} />\n                    <RegionDropdown\n                        className=\"browser-default\"\n                        country={country}\n                        value={region}\n                        onChange={(val) => onChangeRegion(val)} />\n\n                    <FormGroup text=\"city\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"city\"\n                            value={city}\n                            onChange={onChangeCity}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n\n                    <div className=\"form-group\">\n                        <button className=\"btn\" >\n                            <span>Sign Up</span>\n                        </button>   \n                    </div>\n\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Dashboard.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Admin.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Profile.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Search.js",["112"],"// import React from \"react\"\nimport React, { useRef, useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\n//import component\nimport SearchForm from \"./SearchForm\";\n\n//CSS\n// import '../css/Search.css'\n\nconst mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiYmluYXJ5YmVhc3QiLCJhIjoiY2tpbTU3cW8xMHE1ZTJycXJkemdjZThmMSJ9.LUCLnUpyYjcUF48GPUEUVQ';\n\nfunction Search() {\n    const [searchTerm, setSearchTerm] = useState(null)\n    const mapboxElRef = useRef(null);\n\n    \n    const fetcher = (url,city,state,county,country) =>\n    fetch(url) \n     \n      .then(r => r.json())\n      .then(data =>\n        \n        data.map((point, index) => {\n            // console.log(point)\n            // i need to another if statement to check if the search terms matches\n            if(searchTerm) {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                      type: \"Point\",\n                      coordinates: [\n                        point.coordinates.longitude,\n                        point.coordinates.latitude\n                      ]\n                    },\n                    properties: {\n                      id: index, // unique identifier in this case the index\n                      country: point.country,\n                      province: point.province,\n                      county: point.county,\n                      cases: point.stats.confirmed,\n                      deaths: point.stats.deaths,\n                      recovered: point.stats.recovered\n                    }\n            }\n         } else {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                      type: \"Point\",\n                      coordinates: [\n                        point.coordinates.longitude,\n                        point.coordinates.latitude\n                      ]\n                    },\n                    properties: {\n                      id: index, // unique identifier in this case the index\n                      country: point.country,\n                      province: point.province,\n                      county: point.county,\n                      cases: point.stats.confirmed,\n                      deaths: point.stats.deaths,\n                      recovered: point.stats.recovered\n                    }\n            }\n            \n        }})\n      );\n\n  // Fetching our data with swr package\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\n    \n    useEffect(() => {\n        if (data) {\n        // You can store the map instance with useRef too\n        const map = new mapboxgl.Map({\n          container: mapboxElRef.current,\n          style: \"mapbox://styles/binarybeast/ckjdljfpu6smv1ao028dmjh4r\",\n          center: [16, 27], // initial geo location\n          zoom: 1.5 // initial zoom\n        });\n\n        map.addControl(new mapboxgl.NavigationControl());\n        \n     // Call this method when the map is loaded\n     map.once(\"load\", function() {\n        // Add our SOURCE\n        // with id \"points\"\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\", // this should be the id of the source\n          type: \"circle\",\n          // paint properties\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": 1,\n            \"circle-radius\": 4,\n            \"circle-color\": \"#FFEB3B\"\n          }\n        });\n        // Create a mapbox popup\nconst popup = new mapboxgl.Popup({\n    closeButton: true,\n    closeOnClick: true\n  });\n  \n  // Variable to hold the active country/province on hover\n  let lastId;\n  \n  // Mouse move event\n  map.on(\"mousemove\", \"circles\", e => {\n    // Get the id from the properties\n    const id = e.features[0].properties.id;\n  \n    // Only if the id are different we process the tooltip\n    if (id !== lastId) {\n      lastId = id;\n  \n      // Change the pointer type on move move\n      map.getCanvas().style.cursor = \"pointer\";\n  \n      const { cases, deaths, country, province,county,recovered } = e.features[0].properties;\n      const coordinates = e.features[0].geometry.coordinates.slice();\n  \n      // Get all data for the tooltip\n      // const countryISO =\n      //   lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n  \n      const provinceHTML =\n        province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\n  \n        const cityHTML =\n        county !== \"null\" ? `<p>City: <b>${county}</b></p>` : \"\";\n      const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n  \n      // const countryFlagHTML = Boolean(countryISO)\n      //   ? `<img src=\"https://www.countryflags.io/flat/${countryISO}/64.png\"></img>`\n      //   : \"\";\n  \n      const HTML = `<p>Country: <b>${country}</b></p>\n                ${provinceHTML}\n                ${cityHTML}\n                <p>Cases: <b>${cases}</b></p>\n                <p>Recovered: <b>${recovered}</b></p>\n                <p>Deaths: <b>${deaths}</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n               `;\n  \n      // Ensure that if the map is zoomed out such that multiple\n      // copies of the feature are visible, the popup appears\n      // over the copy being pointed to.\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      }\n  \n      popup\n        .setLngLat(coordinates)\n        .setHTML(HTML)\n        .addTo(map);\n    }\n  });\n  \n  // Mouse leave event\n  map.on(\"mouseleave\", \"circles\", function() {\n    // Reset the last Id\n    lastId = undefined;\n    map.getCanvas().style.cursor = \"\";\n    popup.remove();\n  });\n      });\n    }\n\n    \n  }, [data]);\n\n    \n    return (\n      <>\n            <div className='container'>\n                <h1>Covid-19 Cases</h1>\n                < SearchForm />\n            </div>\n        <div className=\"App container\">\n          <div className=\"mapContainer\">\n            {/* Assigned Mapbox container */}\n            <div className=\"mapBox\" ref={mapboxElRef} />\n          </div>\n        </div>\n      </>\n      );\n    }\n\nexport default Search\n\n// class Search extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//         lng: 5,\n//         lat: 34,\n//         zoom: 2\n//         };\n//     }\n\n\n\n    // componentDidMount() {\n    //     const map = new mapboxgl.Map({\n    //     container: this.mapContainer,\n    //     style: 'mapbox://styles/mapbox/streets-v11',\n    //     center: [16, 27], // initial geo location\n    //     zoom: 2\n    //     });\n    //     map.on('move', () => {\n    //         this.setState({\n    //         lng: map.getCenter().lng.toFixed(4),\n    //         lat: map.getCenter().lat.toFixed(4),\n    //         zoom: map.getZoom().toFixed(2)\n    //         });\n    //         });\n    //     }\n    //     render() {\n    //         return (\n    //         <div>\n    //             <h1>Covid Results</h1>\n    //         <div className='sidebarStyle'>\n    //         <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n    //         </div>\n    //         <div ref={el => this.mapContainer = el} className='mapContainer' />\n    //         </div>\n    //         )\n    //         }\n    //         }","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Home.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Login.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/UserDetail.js",["113"],"import React, {useState, useEffect, useRef} from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport { useParams } from 'react-router-dom'\nimport { getOneUser, getRoles, addUserRoles, removeUserRoles, deleteUser } from '../services/user.service'\n\nconst UserDetail = (props) => {\n    const form = useRef()\n    const [user, setUser] = useState('')\n    const [roles, setRoles] = useState('')\n    let { id } = useParams()\n\n    const handleAddRole = (event) => {\n        event.preventDefault()\n        let roleId = event.target.roleId.value\n        let roleName = event.target.roleName.value\n        const newRole =\n            {\n                _id: roleId, \n                name: roleName\n            }\n        // console.log(newRole)\n        addUserRoles(id,newRole)\n        .then(response => {\n            console.log(response.data)\n            window.location.reload()\n        })\n        .catch(err => console.log(err))\n    }\n\n    const handleRemoveRole = (event) => {\n        event.preventDefault()\n        let roleId = event.target.roleId.value\n        let roleName = event.target.roleName.value\n        const newRole =\n            {\n                _id: roleId, \n                name: roleName\n            }\n        // console.log(newRole)\n        removeUserRoles(id,newRole)\n        .then(response => {\n            console.log(response.data)\n            window.location.reload()\n        })\n        .catch(err => console.log(err))\n    }\n\n    const handleDelete = e => {\n        e.preventDefault()\n        deleteUser(id)\n        .then(\n            ()=> {\n                props.history.push('/admin')\n                window.location.reload()\n            }\n        )\n        .catch(err => {console.log(err)})\n        console.log(id)\n    }\n\n    useEffect(() => {\n        getOneUser(id).then(response => {\n            setUser(response.data)\n            },\n            (error) => {\n                const _error =\n                    (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n                setUser(_error);\n              }\n        )\n        getRoles().then(response => {\n            setRoles(response.data)\n            },\n            (error) => {\n                const _error =\n                    (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n                setRoles(_error);\n              }\n        )\n    },[])\n    \n    return(\n        <>\n            {user ? (\n                <div>\n                    <h1>{user.username}</h1>\n                    <p>{user.email}</p>\n                    {user.primaryLocation && \n                    <p>\n                        {user.primaryLocation.city},{' '}\n                        {user.primaryLocation.state},{' '} \n                        {user.primaryLocation.county}{' '}-{' '}\n                        {user.primaryLocation.country}\n                    </p>}\n                    <Form onSubmit={handleDelete} ref={form}>\n                        <Input type='submit' value='Delete User' />\n                    </Form>\n                    {user.roles && \n                        user.roles.map(role => \n                        <div key={role._id}>\n                            <p>{role.name}</p>\n                            <Form onSubmit={handleRemoveRole} ref={form}>\n                                <Input type='hidden' value={role._id} name='roleId'/>\n                                <Input type='hidden' value={role.name} name='roleName'/>\n                                <Input type='submit'  value='Remove Role'/>\n                            </Form>\n                        </div>)\n                    }\n                    {/* {console.log(user)} */}\n                </div>\n            ) : (\n                <div>Loading...</div>\n            )}\n            {roles ? (\n                <div>\n                    <h4>Add Roles</h4>\n                {/* {console.log(roles)} */}\n                {roles.length > 0 ? (\n                    <div>\n                        {console.log(user.roles)}\n                            {roles.map(role => (\n                                <>\n                                    {(user.roles && user.roles.some(existing => existing._id === role._id)) ? (\n                                        <></>\n                                    ) : (\n                                        <div key={role._id}>\n                                            <p>{role.name}</p>\n                                            <Form onSubmit={handleAddRole} ref={form}>\n                                                <Input type='hidden' value={role._id} name='roleId'/>\n                                                <Input type='hidden' value={role.name} name='roleName'/>\n                                                <Input type='submit'  value='Add Role'/>\n                                            </Form>\n                                        </div>\n                                    )}\n                                </>\n                            )\n                        )}\n                    </div>\n                ) : (\n                    <div>No roles to display!</div>\n                )\n            }\n                </div>\n            ) : (\n                <div>Loading...</div>\n            )}\n        </>\n    )\n\n}\n\nexport default UserDetail","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Layout.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/FormGroup.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/auth.service.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/functions.utilities.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchForm.js",["114","115"],"import React, { useState, useEffect, useRef } from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport { Link } from 'react-router-dom'\nimport CheckButton from 'react-validation/build/button'\n\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n//Components\nimport FormGroup from \"./common/FormGroup\"\n\n//Helper\nimport { locationSearch, addToSearchHistory } from '../services/location.services'\nimport { getHistory, removeFromSearchHistory } from '../services/user.service'\nimport { resMessage } from '../utilities/functions.utilities'\nimport searchTerm from './Search'\n\n//CSS\n// import '../css/SearchForm.css'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        )\n    }\n}\n\n\nconst SearchForm = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n    const [id, setId] = useState('')\n\n    const [searchHistory, setSearchHistory] = useState(undefined)\n\n    useEffect(() => {\n        getHistory().then(history => setSearchHistory(history))\n    },[])\n    \n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n\n    const mapSearch = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage(\"\")\n        setSuccessful(false)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            locationSearch(city, region, country, county).then(\n                (response) => {\n                        if(response.data[0]) {\n                            setId(response.data[0]._id)\n                            addToSearchHistory(response.data[0]._id)\n                        } else {\n                            setId(response.data._id)\n                            addToSearchHistory(response.data._id)\n                        }\n                    if(searchHistory.length > 19) {removeFromSearchHistory()}\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    // console.log(response.data)\n                    // console.log(\"country:\", country)\n                    // console.log(\"region:\", region)\n                    // console.log(\"city:\", city)\n                    // console.log(\"county:\", county)\n                    // console.log(\"id:\", id)\n                    // searchTerm(apiResponse.data.results)\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            successful(false)\n        }\n\n\n    }\n\n\n    return(\n            <div className=\"form-container container\">\n                <Form onSubmit={mapSearch} ref={form} className='container'>\n                <div className='input-field'>\n                    <CountryDropdown\n                        className=\"browser-default\"\n                        value={country}\n                        onChange={(val) => onChangeCountry(val)} />\n                </div>\n                <div className='input-field'>\n                    <RegionDropdown\n                        className=\"browser-default\"\n                        country={country}\n                        value={region}\n                        onChange={(val) => onChangeRegion(val)} />\n                </div>\n                <div className='input-field'>\n                    <FormGroup text=\"city\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"city\"\n                            value={city}\n                            onChange={onChangeCity}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n                </div>\n\n                    <div className='input-field'>\n                        <button className=\"btn\" >\n                            <span>Search</span>\n                        </button>   \n                    </div>\n\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\n                </Form>\n                <div>\n                    {id && (\n                        <Link to={`/search/${id}`}>Go to Details</Link>\n                    )}\n                </div>\n            </div>\n    )\n}\n\nexport default SearchForm","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/user.service.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/DeathsGraph.js",["116","117"],"import React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\";\n\n\n\nconst CasesGraph = ({dates, deaths}) => {\n    const data = {\n        labels: dates,\n        datasets: [\n          {\n            label: \"Confirmed Deaths\",\n            data: deaths,\n            fill: true,\n            backgroundColor: \"rgba(255,0,0,0.2)\",\n            borderColor: \"rgba(255,0,0,1)\"\n          }\n        ]\n      };\n    \n    const options = {\n        title: {\n            display: true,\n            text: \"Confirmed Cases\"\n          }\n    }\n\n    return(\n        <div className=\"cases-graph\">\n            <Line data={data} options={options}/>\n        </div>\n    )\n}\n\nexport default CasesGraph","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/CasesGraph.js",["118","119"],"import React, { useState, useEffect } from 'react'\nimport { Line } from \"react-chartjs-2\";\n\n\n\nconst CasesGraph = ({dates, cases}) => {\n    const data = {\n        labels: dates,\n        datasets: [\n          {\n            label: \"Confirmed Cases\",\n            data: cases,\n            fill: true,\n            backgroundColor: \"rgba(75,192,192,0.2)\",\n            borderColor: \"rgba(75,192,192,1)\"\n          }\n        ]\n      };\n    \n    const options = {\n        title: {\n            display: true,\n            text: \"Confirmed Cases\"\n          }\n    }\n\n    return(\n        <div className=\"cases-graph\">\n            <Line data={data} options={options}/>\n        </div>\n    )\n}\n\nexport default CasesGraph","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/localStorage.utilities.js",[],["120","121"],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/authHeader.utilities.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/location.services.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchDetail.js",["122"],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Statistics.js",["123","124","125"],"import React, { useState, useEffect } from 'react'\nimport { getPrimaryLocation, getFavorites, removeFavorite } from '../services/user.service'\nimport { getCurrentUser } from '../services/auth.service'\nimport DeathsGraph from './DeathsGraph'\nimport CasesGraph from './CasesGraph'\nimport MaterialTable from \"material-table\";\n\nconst axios = require('axios')\n\n\nconst Statistics = ({newCountry, newCounty, newRegion}) => {\n    // const [primaryLocation, setPrimaryLocation] = useState({})\n    //Location states\n    const [country, setCountry] = useState(newCountry)\n    const [county, setCounty] = useState(newCounty)\n    const [region, setRegion] = useState(newRegion)\n    //API Stats states\n    const [confirmedCases, setConfirmedCases] = useState('')\n    const [deaths, setDeaths] = useState('')\n    const [recovered, setRecovered] = useState('')\n    const [updatedAt, setUpdatedAt] = useState('')\n    const [historicalDates, setHistoricalDates] = useState([])\n    const [historicalCases, setHistoricalCases] = useState([])\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\n    const [dayFilter, setDayFilter] = useState(30)\n    const [gridData, setGridData] = useState({\n        data: [\n            { name: \"John\", email: \"john@gmail.com\", age: 12, gender: \"Male\",},\n            { name: \"Bren\", email: \"bren@gmail.com\", age: 24, gender: \"Male\" },\n            { name: \"Marry\", email: \"marry@gmail.com\", age: 18, gender: \"Female\" },\n            { name: \"Shohail\", email: \"shohail@gmail.com\", age: 25, gender: \"Male\" },\n            { name: \"Aseka\", email: \"aseka@gmail.com\", age: 19, gender: \"Female\" },\n            { name: \"Meuko\", email: \"meuko@gmail.com\", age: 12, gender: \"Female\" },\n          ],\n        columns: [\n            {\n            title: \"Name\",\n            field: \"name\",\n            },\n            {\n            title: \"Email\",\n            field: \"email\",\n            },\n            {\n            title: \"Age\",\n            field: \"age\",\n            },\n            {\n            title: \"Gender\",\n            field: \"gender\",\n            },\n        ],\n        resolve: () => {}\n    })\n\n\n    const onChangeDayFilter = (event, val) => {\n        setDayFilter(val)\n        console.log(dayFilter)\n    }\n    \n    const onRowDelete = oldData =>\n        new Promise((resolve, reject) => {\n            const dataID = oldData._id\n            removeFavorite(dataID).then(response => {\n                console.log(response)\n            })\n            console.log(dataID)\n            let data = [...gridData.data];\n            const index = data.indexOf(oldData);\n            data.splice(index, 1);\n            const updatedAt = new Date();\n            setGridData({ ...gridData, data, updatedAt, resolve });\n    });\n\n     //Run resolve for table\n     useEffect(() => {\n        gridData.resolve()\n\n    }, [gridData])\n\n    // Get favorites\n    useEffect(() => {\n        getFavorites().then(response => {\n            setGridData({\n                data: response,\n                columns: [\n                    {\n                        title: \"id\",\n                        field: \"_id\",\n                        hidden: true,\n                    },\n                    {\n                        title: \"City\",\n                        field: \"city\",\n                    },\n                    {\n                        title: \"County\",\n                        field: \"county\",\n                    },\n                    {\n                        title: \"State\",\n                        field: \"state\",\n                    },\n                    {\n                        title: \"Country\",\n                        field: \"country\",\n                    },\n                ],\n                resolve: () => {}\n            })\n        })\n    },[])\n\n    // useEffect(()=>{\n    //     getPrimaryLocation()\n    //     .then(response => {\n    //         setPrimaryLocation(response)\n    //     })\n    // }, [])\n    \n\n    useEffect(()=> {\n        // if(primaryLocation.county !== undefined) {\n        if(newCounty !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${newCounty}`)\n            .then(response => {\n                response.data.forEach(data=> {\n                    // if(primaryLocation.state === data.province) {\n                    if(newRegion === data.province) {\n                        setCountry(data.country)\n                        setCounty(data.county)\n                        setRegion(data.province)\n                        setConfirmedCases(data.stats.confirmed)\n                        setDeaths(data.stats.deaths)\n                        setRecovered(data.stats.recovered)\n                        setUpdatedAt(data.updatedAt)\n                    }\n                })\n            })\n        }\n    }, [newCountry, newCounty, newRegion])\n\n\n    useEffect(() => {\n        if(region !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=${dayFilter}`)\n            .then(response => {\n                response.data.forEach(data => {\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\n                        setHistoricalDates(Object.keys(data.timeline.cases))\n                        setHistoricalCases(Object.values(data.timeline.cases))\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\n                    }\n                })\n            })\n        }\n    }, [region, dayFilter])\n\n\n    return(\n        <div>\n            Statistics\n            <p>Country: {country}</p>\n            <p>County: {county}</p>\n            <p>State: {region}</p>\n            <p>Confirmed Cases: {confirmedCases}</p>\n            <p>Deaths: {deaths}</p>\n            <p>Recovered: {recovered}</p>\n            <p>Last Updated: {updatedAt}</p>\n            <h3>Filters: </h3>\n            <ul>\n                <button onClick={e => onChangeDayFilter(e, 7)}>7 Days</button>\n                <button onClick={e => onChangeDayFilter(e, 30)}>30 Days</button>\n                <button onClick={e => onChangeDayFilter(e, \"all\")}>All</button>\n            </ul>\n\n            <CasesGraph dates={historicalDates} cases={historicalCases} />\n            <DeathsGraph dates={historicalDates} deaths={historicalDeaths} />\n\n            <MaterialTable\n                title=\"Favorited Locations\"\n                data={gridData.data}\n                columns={gridData.columns}\n                editable={{\n                    deletable: rowData => true,\n                    onRowDelete: onRowDelete\n                }}\n                options={{ search: true, paging: false, filtering: true, exportButton: true }}\n            />\n        </div>\n    )\n\n}\n\nexport default Statistics",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":35,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"134","line":6,"column":43,"nodeType":"132","messageId":"133","endLine":6,"endColumn":60},{"ruleId":"130","severity":1,"message":"135","line":73,"column":12,"nodeType":"132","messageId":"133","endLine":73,"endColumn":19},{"ruleId":"130","severity":1,"message":"136","line":15,"column":24,"nodeType":"132","messageId":"133","endLine":15,"endColumn":37},{"ruleId":"137","severity":1,"message":"138","line":89,"column":7,"nodeType":"139","endLine":89,"endColumn":9,"suggestions":"140"},{"ruleId":"130","severity":1,"message":"134","line":7,"column":43,"nodeType":"132","messageId":"133","endLine":7,"endColumn":60},{"ruleId":"130","severity":1,"message":"141","line":16,"column":8,"nodeType":"132","messageId":"133","endLine":16,"endColumn":18},{"ruleId":"130","severity":1,"message":"142","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"142","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"126","replacedBy":"143"},{"ruleId":"128","replacedBy":"144"},{"ruleId":"137","severity":1,"message":"138","line":37,"column":7,"nodeType":"139","endLine":37,"endColumn":9,"suggestions":"145"},{"ruleId":"130","severity":1,"message":"146","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":28},{"ruleId":"130","severity":1,"message":"147","line":3,"column":10,"nodeType":"132","messageId":"133","endLine":3,"endColumn":24},{"ruleId":"137","severity":1,"message":"148","line":158,"column":8,"nodeType":"139","endLine":158,"endColumn":27,"suggestions":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'CountryRegionData' is defined but never used.","'loading' is assigned a value but never used.","'setSearchTerm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["152"],"'searchTerm' is defined but never used.","'useState' is defined but never used.",["150"],["151"],["153"],"'getPrimaryLocation' is defined but never used.","'getCurrentUser' is defined but never used.","React Hook useEffect has a missing dependency: 'county'. Either include it or remove the dependency array.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"155","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [id]",{"range":"160","text":"161"},{"range":"162","text":"161"},"Update the dependencies array to be: [region, dayFilter, county]",{"range":"163","text":"164"},[2657,2659],"[id]",[1347,1349],[5468,5487],"[region, dayFilter, county]"]
>>>>>>> 32f300f2059cbdd8cad105131ec9dc1399ca7808
