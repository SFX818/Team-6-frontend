[{"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/index.js":"1","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/App.js":"2","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Search.js":"3","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Layout.js":"4","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Signup.js":"5","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Profile.js":"6","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchDetail.js":"7","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Admin.js":"8","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/About.js":"9","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Login.js":"10","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/UserDetail.js":"11","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Home.js":"12","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Dashboard.js":"13","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/location.services.js":"14","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/auth.service.js":"15","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/user.service.js":"16","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchForm.js":"17","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Loading.js":"18","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/functions.utilities.js":"19","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Statistics.js":"20","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/StatisticsTable.js":"21","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/authHeader.utilities.js":"22","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/FormGroup.js":"23","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/localStorage.utilities.js":"24","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/DeathsGraph.js":"25","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/CasesGraph.js":"26"},{"size":304,"mtime":1609647560227,"results":"27","hashOfConfig":"28"},{"size":1556,"mtime":1610207088337,"results":"29","hashOfConfig":"28"},{"size":7497,"mtime":1610207088344,"results":"30","hashOfConfig":"28"},{"size":2685,"mtime":1610146116163,"results":"31","hashOfConfig":"28"},{"size":9162,"mtime":1610146116162,"results":"32","hashOfConfig":"28"},{"size":1031,"mtime":1609615204809,"results":"33","hashOfConfig":"28"},{"size":4168,"mtime":1610207088344,"results":"34","hashOfConfig":"28"},{"size":2897,"mtime":1610207088341,"results":"35","hashOfConfig":"28"},{"size":1010,"mtime":1610207088339,"results":"36","hashOfConfig":"28"},{"size":4422,"mtime":1610207088344,"results":"37","hashOfConfig":"28"},{"size":7785,"mtime":1610207088346,"results":"38","hashOfConfig":"28"},{"size":637,"mtime":1610207088343,"results":"39","hashOfConfig":"28"},{"size":7320,"mtime":1610739153954,"results":"40","hashOfConfig":"28"},{"size":1075,"mtime":1610146116165,"results":"41","hashOfConfig":"28"},{"size":1231,"mtime":1610146116165,"results":"42","hashOfConfig":"28"},{"size":2870,"mtime":1610146116165,"results":"43","hashOfConfig":"28"},{"size":6069,"mtime":1610207088345,"results":"44","hashOfConfig":"28"},{"size":454,"mtime":1609905236193,"results":"45","hashOfConfig":"28"},{"size":251,"mtime":1609365055429,"results":"46","hashOfConfig":"28"},{"size":3833,"mtime":1610741828628,"results":"47","hashOfConfig":"28"},{"size":4989,"mtime":1610739016773,"results":"48","hashOfConfig":"28"},{"size":347,"mtime":1609536329668,"results":"49","hashOfConfig":"28"},{"size":293,"mtime":1610146116163,"results":"50","hashOfConfig":"28"},{"size":426,"mtime":1609365083485,"results":"51","hashOfConfig":"28"},{"size":797,"mtime":1610741876290,"results":"52","hashOfConfig":"28"},{"size":799,"mtime":1610741842050,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1xnegec",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/index.js",[],["116","117"],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/App.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Search.js",["118"],"// import React from \"react\"\nimport React, { useRef, useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\n//import component\nimport SearchForm from \"./SearchForm\";\n\n//CSS\n// import '../css/Search.css'\n\nconst mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiYmluYXJ5YmVhc3QiLCJhIjoiY2tpbTU3cW8xMHE1ZTJycXJkemdjZThmMSJ9.LUCLnUpyYjcUF48GPUEUVQ';\n\nfunction Search() {\n    const [searchTerm, setSearchTerm] = useState(null)\n    const mapboxElRef = useRef(null);\n\n    \n    const fetcher = (url,city,state,county,country) =>\n    fetch(url) \n     \n      .then(r => r.json())\n      .then(data =>\n        \n        data.map((point, index) => {\n            // console.log(point)\n            // i need to another if statement to check if the search terms matches\n            if(searchTerm) {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                      type: \"Point\",\n                      coordinates: [\n                        point.coordinates.longitude,\n                        point.coordinates.latitude\n                      ]\n                    },\n                    properties: {\n                      id: index, // unique identifier in this case the index\n                      country: point.country,\n                      province: point.province,\n                      county: point.county,\n                      cases: point.stats.confirmed,\n                      deaths: point.stats.deaths,\n                      recovered: point.stats.recovered\n                    }\n            }\n         } else {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                      type: \"Point\",\n                      coordinates: [\n                        point.coordinates.longitude,\n                        point.coordinates.latitude\n                      ]\n                    },\n                    properties: {\n                      id: index, // unique identifier in this case the index\n                      country: point.country,\n                      province: point.province,\n                      county: point.county,\n                      cases: point.stats.confirmed,\n                      deaths: point.stats.deaths,\n                      recovered: point.stats.recovered\n                    }\n            }\n            \n        }})\n      );\n\n  // Fetching our data with swr package\n  const { data } = useSWR(\"https://disease.sh/v3/covid-19/jhucsse\", fetcher);\n    \n    useEffect(() => {\n        if (data) {\n        // You can store the map instance with useRef too\n        const map = new mapboxgl.Map({\n          container: mapboxElRef.current,\n          style: \"mapbox://styles/binarybeast/ckjdljfpu6smv1ao028dmjh4r\",\n          center: [16, 27], // initial geo location\n          zoom: 1.5 // initial zoom\n        });\n\n        map.addControl(new mapboxgl.NavigationControl());\n        \n     // Call this method when the map is loaded\n     map.once(\"load\", function() {\n        // Add our SOURCE\n        // with id \"points\"\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\", // this should be the id of the source\n          type: \"circle\",\n          // paint properties\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": 1,\n            \"circle-radius\": 4,\n            \"circle-color\": \"#FFEB3B\"\n          }\n        });\n        // Create a mapbox popup\nconst popup = new mapboxgl.Popup({\n    closeButton: true,\n    closeOnClick: true\n  });\n  \n  // Variable to hold the active country/province on hover\n  let lastId;\n  \n  // Mouse move event\n  map.on(\"mousemove\", \"circles\", e => {\n    // Get the id from the properties\n    const id = e.features[0].properties.id;\n  \n    // Only if the id are different we process the tooltip\n    if (id !== lastId) {\n      lastId = id;\n  \n      // Change the pointer type on move move\n      map.getCanvas().style.cursor = \"pointer\";\n  \n      const { cases, deaths, country, province,county,recovered } = e.features[0].properties;\n      const coordinates = e.features[0].geometry.coordinates.slice();\n  \n      // Get all data for the tooltip\n      // const countryISO =\n      //   lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n  \n      const provinceHTML =\n        province !== \"null\" ? `<p>Province: <b>${province}</b></p>` : \"\";\n  \n        const cityHTML =\n        county !== \"null\" ? `<p>City: <b>${county}</b></p>` : \"\";\n      const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n  \n      // const countryFlagHTML = Boolean(countryISO)\n      //   ? `<img src=\"https://www.countryflags.io/flat/${countryISO}/64.png\"></img>`\n      //   : \"\";\n  \n      const HTML = `<p>Country: <b>${country}</b></p>\n                ${provinceHTML}\n                ${cityHTML}\n                <p>Cases: <b>${cases}</b></p>\n                <p>Recovered: <b>${recovered}</b></p>\n                <p>Deaths: <b>${deaths}</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n               `;\n  \n      // Ensure that if the map is zoomed out such that multiple\n      // copies of the feature are visible, the popup appears\n      // over the copy being pointed to.\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      }\n  \n      popup\n        .setLngLat(coordinates)\n        .setHTML(HTML)\n        .addTo(map);\n    }\n  });\n  \n  // Mouse leave event\n  map.on(\"mouseleave\", \"circles\", function() {\n    // Reset the last Id\n    lastId = undefined;\n    map.getCanvas().style.cursor = \"\";\n    popup.remove();\n  });\n      });\n    }\n\n    \n  }, [data]);\n\n    \n    return (\n      <>\n            <div className='container'>\n                <h1>Covid-19 Cases</h1>\n                < SearchForm />\n            </div>\n        <div className=\"App container\">\n          <div className=\"mapContainer\">\n            {/* Assigned Mapbox container */}\n            <div className=\"mapBox\" ref={mapboxElRef} />\n          </div>\n        </div>\n      </>\n      );\n    }\n\nexport default Search\n\n// class Search extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//         lng: 5,\n//         lat: 34,\n//         zoom: 2\n//         };\n//     }\n\n\n\n    // componentDidMount() {\n    //     const map = new mapboxgl.Map({\n    //     container: this.mapContainer,\n    //     style: 'mapbox://styles/mapbox/streets-v11',\n    //     center: [16, 27], // initial geo location\n    //     zoom: 2\n    //     });\n    //     map.on('move', () => {\n    //         this.setState({\n    //         lng: map.getCenter().lng.toFixed(4),\n    //         lat: map.getCenter().lat.toFixed(4),\n    //         zoom: map.getZoom().toFixed(2)\n    //         });\n    //         });\n    //     }\n    //     render() {\n    //         return (\n    //         <div>\n    //             <h1>Covid Results</h1>\n    //         <div className='sidebarStyle'>\n    //         <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n    //         </div>\n    //         <div ref={el => this.mapContainer = el} className='mapContainer' />\n    //         </div>\n    //         )\n    //         }\n    //         }","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Layout.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Signup.js",["119"],"import React, { useState, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\nimport { isEmail } from \"validator\"\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\n//Helper\nimport { register, login } from '../services/auth.service'\nimport { resMessage } from '../utilities/functions.utilities'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        )\n    }\n}\n\n//Function that validates username\nconst vusername = (value) => {\n    if(value.length < 3 || value.length >= 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your username must be between 3 and 20 characters\n            </div>\n        )\n    }\n}\n\n//Function that validates passwords\nconst vpassword = (value) => {\n    if(value.length < 6 || value.length >= 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your password must be between 6 and 40 characters\n            </div>\n        )\n    }\n}\n\nconst validEmail = (value) => {\n    if(!isEmail) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Submitted e-mail not valid\n            </div>\n        )\n    }\n}\n\nconst Register = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n    const [loading, setLoading] = useState(false)\n    \n    const onChangeUsername = (e) => {\n        const username = e.target.value\n        setUsername(username)\n    }\n\n    const onChangePassword = (e) => {\n        const password = e.target.value\n        setPassword(password)\n    }\n\n    const onChangeEmail = (e) => {\n        const email = e.target.value\n        setEmail(email)\n    }\n\n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n    const handleSignup = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage(\"\")\n        setSuccessful(false)\n        //delay for 2 seconds then switch to the login page\n        \n        \n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            register(username, email, password, country, region, city, county).then(\n                (response) => {\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    // console.log(\"COUNTY AFTER REGISTER\", county)\n                    login(username, password).then(\n                        ()=> {\n                            props.history.push(\"/dashboard\")\n                            window.location.reload()\n                        },\n                        (error) => {\n                            // Checking all the data received from our backend\n                            \n                            // Setting loading to false and return the error\n                            setLoading(false)\n                            setMessage(resMessage(error))\n                        }\n                    )\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            successful(false)\n        }\n\n\n    }\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"input-field img-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n                </div>\n                <Form onSubmit={handleSignup} ref={form} className=\"form\">\n                        <label for='username'>Username</label>\n                        <div className='input-field'>\n                            <Input\n                                type=\"text\"\n                                name=\"username\"\n                                value={username}\n                                placeholder=\"Username\"\n                                onChange={onChangeUsername}\n                                validations={[required, vusername]}\n                            />\n                            \n                        </div>\n\n                        <label for=\"email\">Email</label>\n                        <div className='input-field'>\n                            <Input\n                                type=\"email\"\n                                name=\"email\"\n                                value={email}\n                                placeholder=\"Email\"\n                                onChange={onChangeEmail}\n                                validations={[required, validEmail]}\n                            />\n                        </div>\n\n                        <label for='password'>Password</label>\n                        <div className='input-field'>\n                            <Input\n                                type=\"password\"\n                                name=\"password\"\n                                value={password}\n                                placeholder=\"Password\"\n                                onChange={onChangePassword}\n                                validations={[required, vpassword]}\n                            />\n                        </div>\n                        <div className=\"input-field\">\n                            <CountryDropdown\n                                className=\"browser-default\"\n                                value={country}\n                                onChange={(val) => onChangeCountry(val)} />\n                        </div>\n\n                        <div className=\"input-field\">\n                            <RegionDropdown\n                                className=\"browser-default\"\n                                country={country}\n                                value={region}\n                                onChange={(val) => onChangeRegion(val)} />\n                        </div>\n\n                        <label for='city'>City</label>\n                        <div className='input-field'>\n                            <Input\n                                type=\"text\"\n                                name=\"city\"\n                                value={city}\n                                placeholder=\"City\"\n                                onChange={onChangeCity}\n                                validations={[required]}\n                            />\n                        </div>\n                        \n\n                        <div className=\"input-field\">\n                            <button className=\"btn waves-effect waves-light\">\n                                <span>Sign Up</span>\n                                <i class=\"material-icons right\">send</i>\n                            </button>   \n                        </div>\n\n\n                        {message && (\n                            <div className=\"input-field\">\n                                <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\n                                    {message}\n                                </div>\n                            </div>\n                        )}\n\n                        <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\n\n                        <div className=\"input-field\">\n                            <p>Already a member? <Link to=\"/login\">Log In</Link></p>          \n                        </div>\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Profile.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchDetail.js",["120","121"],"import React, {useState, useEffect, useRef} from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport { useParams, Link } from 'react-router-dom'\nimport { getOneLocation } from '../services/location.services'\nimport { addFavorite, getFavorites, removeFavorite } from '../services/user.service'\nimport { getCurrentUser } from '../services/auth.service'\n\nimport Statistics from './Statistics'\nimport '../css/SearchDetail.css'\n\nconst SearchDetail = () => {\n    const form = useRef()\n    const [location, setLocation] = useState('')\n    const [currentUser, setCurrentUser] = useState(undefined)\n    const [favoriteLocations, setFavoriteLocations] = useState([])\n    const [message, setMessage] = useState('')\n    let { id } = useParams()\n\n    useEffect(() => {\n        getOneLocation(id).then(response => {\n            setLocation(response.data)\n            },\n            (error) => {\n                setMessage(error)\n                setLocation(error)\n            }\n        )\n        const user = getCurrentUser()\n        if(user) {\n            setCurrentUser(user)\n            getFavorites().then(favorites => {\n                setFavoriteLocations(favorites)\n            },\n            (error) => {\n                setMessage(error)\n                setFavoriteLocations(error)\n            })\n        }\n    },[])\n\n    const handleAddFavorite = e => {\n        e.preventDefault()\n        let user = currentUser.id\n        let id = e.target.id.value\n\n        addFavorite(user,id)\n        .then(response => {\n            // console.log(response.data)\n            setMessage(response.data)\n            window.location.reload()\n        })\n        .catch(err => setMessage(err))\n    }\n\n    const handleRemove = event => {\n        event.preventDefault()\n        let user = currentUser.id\n        let id = (event.target.id.value)\n\n        removeFavorite(user, id)\n        .then(response => {\n            // console.log(response.data)\n            setMessage(response.data)\n            window.location.reload()\n        })\n        .catch(err => setMessage(err))\n    }\n\n    return(\n        <div className='main container'>\n            {location ? (\n                <div className='row header-container'>\n                    <h3>{location.city}, {location.state} - {location.country}</h3>\n                    {currentUser ? (\n                        <>\n                        {(favoriteLocations.length > 0 && favoriteLocations.some(existing => existing._id === location._id)) ? (\n                            <Form ref={form} onSubmit={handleRemove}>\n                                <Input type='hidden' value={location._id} name='id'/>\n                                <Input type='submit' value='Remove from Favorite Locations' name='submit' className='waves-effect waves-light btn'/>\n                            </Form>\n                        ) : (\n                            <Form ref={form} onSubmit={handleAddFavorite}>\n                                <Input type='hidden' value={location._id} name='id'/>\n                                <Input type='submit' value='Add to Favorite Locations' name='submit' className='waves-effect waves-light btn'/>\n                            </Form>\n                        )}\n                        </>\n                    ) : (\n                        <div><Link to='/login'>Login</Link> or <Link to='/register'>Register</Link> to add to favorite locations!</div>\n                    )}\n                    <div className='row back-container'>\n                        <Link to='/search' className='waves-effect waves-teal btn-flat'>Back to Map</Link>\n                    </div>\n                </div>\n            ) : (\n                <div className='progress'>\n                    <span className='indeterminate'></span>\n                </div>\n            )}\n            <div className='row statistics-container'>\n                <Statistics\n                    newCountry={location.country}\n                    newCounty={location.county}\n                    newRegion={location.state}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default SearchDetail","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Admin.js",["122"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { getAllUsers } from '../services/user.service'\nimport {resMessage} from '../utilities/functions.utilities'\n\nconst Admin = () => {\n    const [users, setUsers] = useState('')\n    const [message, setMessage] = useState('')\n\n    useEffect(() => {\n        getAllUsers().then(response => {\n            setUsers(response.data)\n            },\n            (error) => {\n                setMessage(resMessage(error))\n                setUsers(error);\n              }\n        )\n    },[])\n    return(\n        <>\n            {users ? (\n                <div className='container'>\n                    <h2>All Users</h2>\n                    {/* {console.log(users)} */}\n                    {users.length > 0 ? (\n                        <>\n                            {users.map(user => (\n                                <div key={user._id} className='row'>\n                                    <div className='col s12'>\n                                        <div className='card'>\n                                            <div className='card-content'>\n                                                <span className='card-title'>\n                                                    <Link to={`/admin/users/${user._id}`}>\n                                                        <h4>{user.username}</h4>\n                                                    </Link>    \n                                                </span>\n                                                <p>{user.email}</p>\n                                                {user.primaryLocation && \n                                                <p>\n                                                    {user.primaryLocation.city},{' '}\n                                                    {user.primaryLocation.state},{' '} \n                                                    {user.primaryLocation.county}{' '}-{' '}\n                                                    {user.primaryLocation.country}\n                                                </p>}\n                                                {user.roles && \n                                                    user.roles.map(role => <p key={role._id}>{role.name}</p>)\n                                                }\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </>\n                    ) : (\n                        <div>No Users to Show!</div>\n                    )}\n                </div>\n            ) : (\n                <div className='progress'>\n                    <span className='indeterminate'></span>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default Admin","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/About.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Login.js",["123"],"import React, { useState, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\n\n// Components\nimport Loading from './common/Loading'\n\n// Helper\nimport { login } from '../services/auth.service'\nimport { resMessage } from '../utilities/functions.utilities'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className='alert'>\n                This field is required!\n            </div>\n        )\n    }\n}\n\nconst Login = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [message, setMessage] = useState('')\n\n    const onChangeUsername = (e) => {\n        const username = e.target.value\n        setUsername(username)\n    }\n\n    const onChangePassword = (e) => {\n        const password = e.target.value\n        setPassword(password)\n    }\n\n    const handleLogin = (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage('')\n        setLoading(true)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        if(checkBtn.current.context._errors.length === 0) {\n            login(username, password).then(\n                ()=> {\n                    props.history.push('/dashboard')\n                    window.location.reload()\n                },\n                (error) => {                    \n                    // Setting loading to false and return the error\n                    setLoading(false)\n                    setMessage(resMessage(error))\n                }\n            )\n        } else {\n            loading(false)\n        }\n\n\n    }\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"input-field img-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n\n                <Form onSubmit={handleLogin} ref={form}>\n                    <label for='username'>Username</label>\n                    <div className='input-field'>\n                        <Input\n                            type=\"text\"\n                            // className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            validations={[required]}\n                        />\n                    </div>\n\n                    <label for='password'>Password</label>\n                    <div className='input-field'>\n                        <Input\n                            type=\"password\"\n                            // className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={onChangePassword}\n                            validations={[required]}\n                        />\n                    </div>\n                    \n                    <div className=\"input-field\">\n                        <button className=\"btn waves-effect waves-light\">\n                            <span>Login</span>\n                            <i class=\"material-icons right\">send</i>\n                        </button>   \n                    </div>\n\n                    {message && (\n                        <div className='input-field'>\n                            <div className='alert alert-danger' role='alert'>\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: 'none'}} ref={checkBtn}/>\n                    \n                    <div className=\"input-field\">\n                        <p>Not a member? <Link to=\"/register\">Sign Up</Link></p>           \n                    </div>\n                </Form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/UserDetail.js",["124","125"],"import React, {useState, useEffect, useRef} from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport { useParams } from 'react-router-dom'\nimport { getOneUser, getRoles, addUserRoles, removeUserRoles, deleteUser } from '../services/user.service'\n\nconst UserDetail = (props) => {\n    const form = useRef()\n    const [user, setUser] = useState('')\n    const [roles, setRoles] = useState('')\n    const [message, setMessage] = useState('')\n    let { id } = useParams()\n\n    const handleAddRole = (event) => {\n        event.preventDefault()\n        let roleId = event.target.roleId.value\n        let roleName = event.target.roleName.value\n        const newRole =\n            {\n                _id: roleId, \n                name: roleName\n            }\n        // console.log(newRole)\n        addUserRoles(id,newRole)\n        .then(response => {\n            setMessage(response.data)\n            window.location.reload()\n        })\n        .catch(err => setMessage(err))\n    }\n\n    const handleRemoveRole = (event) => {\n        event.preventDefault()\n        let roleId = event.target.roleId.value\n        let roleName = event.target.roleName.value\n        const newRole =\n            {\n                _id: roleId, \n                name: roleName\n            }\n        // console.log(newRole)\n        removeUserRoles(id,newRole)\n        .then(response => {\n            setMessage(response.data)\n            window.location.reload()\n        })\n        .catch(err => setMessage(err))\n    }\n\n    const handleDelete = e => {\n        e.preventDefault()\n        deleteUser(id)\n        .then(\n            ()=> {\n                props.history.push('/admin')\n                window.location.reload()\n            }\n        )\n        .catch(err => {setMessage(err)})\n        // console.log(id)\n    }\n\n    useEffect(() => {\n        getOneUser(id).then(response => {\n            setUser(response.data)\n            },\n            (error) => {\n                setMessage(error)\n                setUser(error)\n              }\n        )\n        getRoles().then(response => {\n            setRoles(response.data)\n            },\n            (error) => {\n                setMessage(error)\n                setRoles(error);\n              }\n        )\n    },[])\n    \n    return(\n        <div className='container'>\n            {user ? (\n                <div className='row'>\n                    <div className='col s12'>\n                        <div className='card'>\n                            <div className='card-content'>\n                            <span className='card-title'><h3>{user.username}</h3></span>\n                                <p>{user.email}</p>\n                                {user.primaryLocation && \n                                <p>\n                                    {user.primaryLocation.city},{' '}\n                                    {user.primaryLocation.state},{' '} \n                                    {user.primaryLocation.county}{' '}-{' '}\n                                    {user.primaryLocation.country}\n                                </p>}\n                                <Form onSubmit={handleDelete} ref={form}>\n                                    <Input type='submit' value='Delete User' className='card-action'/>\n                                </Form>\n                                {user.roles && \n                                    user.roles.map(role => \n                                    <div key={role._id}>\n                                        {/* <p>{role.name}</p> */}\n                                        <Form onSubmit={handleRemoveRole} ref={form}>\n                                            <Input type='hidden' value={role._id} name='roleId'/>\n                                            <Input type='hidden' value={role.name} name='roleName'/>\n                                            <Input \n                                                type='submit'  \n                                                value={`Remove ${role.name.slice(0,1).toUpperCase()+ role.name.slice(1,role.name.length)} Role`} \n                                                className='card-action'\n                                            />\n                                        </Form>\n                                    </div>)\n                                }\n                                {/* {console.log(user)} */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div className='progress'>\n                    <span className='indeterminate'></span>\n                </div>\n            )}\n            {roles ? (\n                <div>\n                    <div className='row'>\n                        <div className='col s12'>\n                            <div className='card'>\n                                <div className='card-content'>\n                                    <span className='card-title'><h4>Add Roles</h4></span>\n                                        {/* {console.log(roles)} */}\n                                        {roles.length > 0 ? (\n                                            <div>\n                                                {/* {console.log(user.roles)} */}\n                                                    {roles.map(role => (\n                                                        <>\n                                                            {(user.roles && user.roles.some(existing => existing._id === role._id)) ? (\n                                                                <></>\n                                                            ) : (\n                                                                <div key={role._id}>\n                                                                    {/* <p>{role.name}</p> */}\n                                                                    <Form onSubmit={handleAddRole} ref={form}>\n                                                                        <Input type='hidden' value={role._id} name='roleId'/>\n                                                                        <Input type='hidden' value={role.name} name='roleName'/>\n                                                                        <Input \n                                                                            type='submit'  \n                                                                            value={`Add ${role.name.slice(0,1).toUpperCase()+ role.name.slice(1,role.name.length)} Role`} \n                                                                            className='card-action'\n                                                                        />\n                                                                    </Form>\n                                                                </div>\n                                                            )}\n                                                        </>\n                                                    )\n                                                )}\n                                                \n                                        </div>\n                                    ) : (\n                                        <div>No roles to display!</div>\n                                    )\n                                }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div className='progress'>\n                    <span className='indeterminate'></span>\n                </div>\n            )}\n        </div>\n    )\n\n}\n\nexport default UserDetail","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Home.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Dashboard.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/location.services.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/auth.service.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/services/user.service.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/SearchForm.js",["126","127","128","129"],"import React, { useState, useEffect, useRef } from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport { Link } from 'react-router-dom'\nimport CheckButton from 'react-validation/build/button'\n\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n//Components\nimport FormGroup from \"./common/FormGroup\"\nimport Loading from './common/Loading'\n\n//Helper\nimport { locationSearch, addToSearchHistory } from '../services/location.services'\nimport { getHistory, removeFromSearchHistory } from '../services/user.service'\nimport { resMessage } from '../utilities/functions.utilities'\nimport searchTerm from './Search'\n\n//CSS\n// import '../css/SearchForm.css'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className='alert alert-danger' role='alert'>\n                This field is required!\n            </div>\n        )\n    }\n}\n\n\nconst SearchForm = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n    const [id, setId] = useState('')\n    const [searchHistory, setSearchHistory] = useState(undefined)\n\n    const[loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        getHistory().then(history => setSearchHistory(history))\n    },[])\n    \n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n\n    const mapSearch = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage('')\n        setSuccessful(false)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            locationSearch(country, region, city, county).then(\n                (response) => {\n                    // console.log(response)\n                        if(response.data[0]) {\n                            setId(response.data[0]._id)\n                            addToSearchHistory(response.data[0]._id)\n                        } else {\n                            setId(response.data._id)\n                            addToSearchHistory(response.data._id)\n                        }\n                    if(searchHistory && searchHistory.length > 19) {removeFromSearchHistory()}\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    // console.log(response.data)\n                    // console.log(\"country:\", country)\n                    // console.log(\"region:\", region)\n                    // console.log(\"city:\", city)\n                    // console.log(\"county:\", county)\n                    // console.log(\"id:\", id)\n                    // searchTerm(apiResponse.data.results)\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            setSuccessful(false)\n        }\n\n\n    }\n\n\n    return(\n            <div className='form-container container'>\n                <Form onSubmit={mapSearch} ref={form} className='container'>\n                <div className='input-field'>\n                    <CountryDropdown\n                        className='browser-default'\n                        value={country}\n                        onChange={(val) => onChangeCountry(val)} />\n                </div>\n                <div className='input-field'>\n                    <RegionDropdown\n                        className='browser-default'\n                        country={country}\n                        value={region}\n                        onChange={(val) => onChangeRegion(val)} />\n                </div>\n                <label for='city'>City</label>\n                <div className='input-field'>\n                        <Input\n                            type='text'\n                            className='form-control'\n                            name='city'\n                            value={city}\n                            placeholder='City'\n                            onChange={onChangeCity}\n                            validations={[required]}\n                        />\n                </div>\n\n                    <Loading text='Search' loading={loading} />\n\n                    {message && (\n                        <div className='input-field'>\n                            <div className={successful ? 'alert alert-success' : 'alert alert-danger'} role='alert'>\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: 'none'}} ref={checkBtn}/>\n                <div className='input-field'>\n                    {id && (\n                        <Link to={`/search/${id}`}>Go to Details</Link>\n                    )}\n                </div>\n                </Form>\n            </div>\n    )\n}\n\nexport default SearchForm","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/Loading.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/functions.utilities.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/Statistics.js",["130","131"],"import React, { useState, useEffect } from 'react'\nimport DeathsGraph from './DeathsGraph'\nimport CasesGraph from './CasesGraph'\nimport '../css/Statistics.css'\n\nconst axios = require('axios')\n\n\nconst Statistics = ({newCountry, newCounty, newRegion}) => {\n    //Location states\n    const [country, setCountry] = useState(newCountry)\n    const [county, setCounty] = useState(newCounty)\n    const [region, setRegion] = useState(newRegion)\n    //API Stats states\n    const [confirmedCases, setConfirmedCases] = useState('')\n    const [deaths, setDeaths] = useState('')\n    const [recovered, setRecovered] = useState('')\n    const [updatedAt, setUpdatedAt] = useState('')\n    const [historicalDates, setHistoricalDates] = useState([])\n    const [historicalCases, setHistoricalCases] = useState([])\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\n    const [dayFilter, setDayFilter] = useState(30)\n\n    const onChangeDayFilter = (event, val) => {\n        setDayFilter(val)\n        console.log(dayFilter)\n    }\n    \n    useEffect(()=> {\n        if(newCounty !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${newCounty}`)\n            .then(response => {\n                response.data.forEach(data=> {\n                    if(newRegion === data.province) {\n                        setCountry(data.country)\n                        setCounty(data.county)\n                        setRegion(data.province)\n                        setConfirmedCases(data.stats.confirmed)\n                        setDeaths(data.stats.deaths)\n                        setRecovered(data.stats.recovered)\n                        setUpdatedAt(data.updatedAt)\n                    }\n                })\n            })\n        }\n    }, [newCountry, newCounty, newRegion, country, county, region])\n\n\n    useEffect(() => {\n        if(region !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=${dayFilter}`)\n            .then(response => {\n                response.data.forEach(data => {\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\n                        setHistoricalDates(Object.keys(data.timeline.cases))\n                        setHistoricalCases(Object.values(data.timeline.cases))\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\n                    }\n                })\n            })\n        }\n    }, [region, dayFilter, newCountry, newCounty, newRegion])\n\n\n    return(\n        <div className='container'>\n            <div className='row'>\n                <div className='col s12'>\n                    <div className='card'>\n                        <p>Country: {country}</p>\n                        <p>County: {county}</p>\n                        <p>State: {region}</p>\n                        <p>Confirmed Cases: {confirmedCases}</p>\n                        <p>Deaths: {deaths}</p>\n                        <p>Last Updated: {updatedAt}</p>\n                    </div>\n                </div>\n            </div>\n\n            <div className='row graph-container'>\n                    <ul>\n                        <button onClick={e => onChangeDayFilter(e, 7)} className='waves-effect waves-light btn-small'>7 Days</button>\n                        <button onClick={e => onChangeDayFilter(e, 30)} className='waves-effect waves-light btn-small'>30 Days</button>\n                        <button onClick={e => onChangeDayFilter(e, \"all\")} className='waves-effect waves-light btn-small'>All</button>\n                    </ul>\n\n                    <CasesGraph dates={historicalDates} cases={historicalCases} />\n                    <DeathsGraph dates={historicalDates} deaths={historicalDeaths} />\n            </div>\n        </div>\n    )\n\n}\n\nexport default Statistics","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/StatisticsTable.js",["132"],"import React, { useState, useEffect } from 'react'\nimport { getFavorites, removeFavorite } from '../services/user.service'\nimport MaterialTable from \"material-table\";\nimport '../css/StatisticsTable.css'\n\nconst axios = require('axios')\n\n\nconst StatisticsTable = ({onChangeStatistics}) => {\n    const [gridTable, setGridTable] = useState({\n        resolve: () => {}\n    })\n    const [gridData, setGridData] = useState([])\n\n    const onRowDelete = oldData =>\n        new Promise((resolve, reject) => {\n            const dataID = oldData._id\n            removeFavorite(dataID).then(response => {\n                console.log(response)\n            })\n            console.log(dataID)\n            let data = [...gridTable.data];\n            const index = data.indexOf(oldData);\n            data.splice(index, 1);\n            const updatedAt = new Date();\n            setGridTable({ ...gridTable, data, updatedAt, resolve });\n        })\n    \n    const onRowEdit = oldData =>\n    new Promise((resolve, reject) => {\n        const dataID = oldData._id\n        console.log(dataID)\n        // let data = [...gridTable.data];\n        // const index = data.indexOf(oldData);\n        // data.splice(index, 1);\n        // const updatedAt = new Date();\n        // setGridTable({ ...gridTable, data, updatedAt, resolve });\n    })\n\n\n    //Get favorites and set state\n    useEffect(() => {\n        let localGridData\n        //Get Favorites data\n        getFavorites().then(response => {\n            localGridData = response\n            response.forEach((favoritesData, index) => {\n                console.log(favoritesData)\n                const favoritesRegion = favoritesData.state\n                console.log(favoritesRegion)\n                //Make API call with favorites data county\n                axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${favoritesData.county}`)\n                .then(response => {\n                    // Loop through API response and get the data for the county\n                    response.data.forEach((countyData) => {\n                        //Check if favorites state matches returned array of API response state\n                        if(countyData.province === favoritesRegion) {\n                            //merges the favorite location object with API response data\n                            let merged = Object.assign({}, localGridData[index], countyData.stats)\n                            setGridData(prevArray => [...prevArray, merged])\n                        }\n                    })\n                })\n\n            })\n        })\n    },[])\n\n    useEffect(()=> {\n        console.log(\"FINALY GRID DATA:\", gridData)\n        setGridTable({\n            data: gridData,\n            columns: [\n                {\n                    title: \"id\",\n                    field: \"_id\",\n                    hidden: true,\n                },\n                {\n                    title: \"City\",\n                    field: \"city\",\n                },\n                {\n                    title: \"County\",\n                    field: \"county\",\n                },\n                {\n                    title: \"State\",\n                    field: \"state\",\n                },\n                {\n                    title: \"Country\",\n                    field: \"country\",\n                },\n                {\n                    title: \"Confirmed Cases\",\n                    field: \"confirmed\",\n                },\n                {\n                    title: \"Confirmed Deaths\",\n                    field: \"deaths\",\n                },\n            ],\n            resolve: () => {}\n\n        })\n    }, [gridData])\n\n    //Run resolve for table\n    useEffect(() => {\n        gridTable.resolve()\n    }, [gridData, gridTable])\n\n    return (\n        <div className='row stats-container'>\n            <div className='col s12'>\n                <MaterialTable\n                    title=\"Favorited Locations\"\n                    className='stats-table'\n                    data={gridTable.data}\n                    columns={gridTable.columns}\n                    editable={{\n                        deletable: rowData => true,\n                        onRowDelete: onRowDelete\n                    }}\n                    options={{ search: true, paging: false, filtering: true, exportButton: true }}\n                    localization={{\n                        header: {\n                            actions: \"Actions\"\n                        },\n                        body: {\n                            editRow: {\n                                deleteText: \"Are you sure you want to remove this favorited location?\"\n                            },\n                            deleteTooltip: \"Remove from favorite location\",\n                        },\n                    }}\n                    onRowClick={(event, rowData, ) => onChangeStatistics(rowData.county, rowData.state, rowData.country)}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default StatisticsTable","/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/authHeader.utilities.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/common/FormGroup.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/utilities/localStorage.utilities.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/DeathsGraph.js",[],"/Users/cameronmoreno/Desktop/GA/projects/Binary-Beasts-Project/team-6-frontend/src/components/CasesGraph.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":15,"column":24,"nodeType":"139","messageId":"140","endLine":15,"endColumn":37},{"ruleId":"137","severity":1,"message":"141","line":71,"column":12,"nodeType":"139","messageId":"140","endLine":71,"endColumn":19},{"ruleId":"137","severity":1,"message":"142","line":17,"column":12,"nodeType":"139","messageId":"140","endLine":17,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":40,"column":7,"nodeType":"145","endLine":40,"endColumn":9,"suggestions":"146"},{"ruleId":"137","severity":1,"message":"142","line":9,"column":12,"nodeType":"139","messageId":"140","endLine":9,"endColumn":19},{"ruleId":"137","severity":1,"message":"147","line":8,"column":8,"nodeType":"139","messageId":"140","endLine":8,"endColumn":15},{"ruleId":"137","severity":1,"message":"142","line":11,"column":12,"nodeType":"139","messageId":"140","endLine":11,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":80,"column":7,"nodeType":"145","endLine":80,"endColumn":9,"suggestions":"148"},{"ruleId":"137","severity":1,"message":"149","line":7,"column":43,"nodeType":"139","messageId":"140","endLine":7,"endColumn":60},{"ruleId":"137","severity":1,"message":"150","line":10,"column":8,"nodeType":"139","messageId":"140","endLine":10,"endColumn":17},{"ruleId":"137","severity":1,"message":"151","line":17,"column":8,"nodeType":"139","messageId":"140","endLine":17,"endColumn":18},{"ruleId":"137","severity":1,"message":"152","line":49,"column":20,"nodeType":"139","messageId":"140","endLine":49,"endColumn":30},{"ruleId":"137","severity":1,"message":"153","line":17,"column":12,"nodeType":"139","messageId":"140","endLine":17,"endColumn":21},{"ruleId":"143","severity":1,"message":"154","line":62,"column":8,"nodeType":"145","endLine":62,"endColumn":61,"suggestions":"155"},{"ruleId":"137","severity":1,"message":"156","line":29,"column":11,"nodeType":"139","messageId":"140","endLine":29,"endColumn":20},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'setSearchTerm' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'message' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'Loading' is defined but never used.",["160"],"'CountryRegionData' is defined but never used.","'FormGroup' is defined but never used.","'searchTerm' is defined but never used.","'setLoading' is assigned a value but never used.","'recovered' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'county'. Either include it or remove the dependency array.",["161"],"'onRowEdit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"162","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [id]",{"range":"167","text":"168"},{"range":"169","text":"168"},"Update the dependencies array to be: [region, dayFilter, newCountry, newCounty, newRegion, county]",{"range":"170","text":"171"},[1367,1369],"[id]",[2287,2289],[2479,2532],"[region, dayFilter, newCountry, newCounty, newRegion, county]"]