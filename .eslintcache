[{"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/index.js":"1","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/App.js":"2","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Home.js":"3","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Login.js":"4","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Search.js":"5","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Profile.js":"6","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Admin.js":"7","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/UserDetail.js":"8","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/About.js":"9","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Signup.js":"10","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Dashboard.js":"11","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/common/Layout.js":"12","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/common/FormGroup.js":"13","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/SearchForm.js":"14","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/functions.utilities.js":"15","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/auth.service.js":"16","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/user.service.js":"17","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Statistics.js":"18","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/localStorage.utilities.js":"19","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/authHeader.utilities.js":"20","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/location.services.js":"21"},{"size":302,"mtime":1609385079238,"results":"22","hashOfConfig":"23"},{"size":901,"mtime":1609638394856,"results":"24","hashOfConfig":"23"},{"size":190,"mtime":1609641627364,"results":"25","hashOfConfig":"23"},{"size":3935,"mtime":1609544742762,"results":"26","hashOfConfig":"23"},{"size":7407,"mtime":1609641828804,"results":"27","hashOfConfig":"23"},{"size":1031,"mtime":1609544742765,"results":"28","hashOfConfig":"23"},{"size":2200,"mtime":1609544742760,"results":"29","hashOfConfig":"23"},{"size":1502,"mtime":1609544742769,"results":"30","hashOfConfig":"23"},{"size":132,"mtime":1609544742758,"results":"31","hashOfConfig":"23"},{"size":7231,"mtime":1609544742766,"results":"32","hashOfConfig":"23"},{"size":4479,"mtime":1609544742761,"results":"33","hashOfConfig":"23"},{"size":1326,"mtime":1609641576713,"results":"34","hashOfConfig":"23"},{"size":292,"mtime":1609544742770,"results":"35","hashOfConfig":"23"},{"size":4550,"mtime":1609638636104,"results":"36","hashOfConfig":"23"},{"size":251,"mtime":1609544742778,"results":"37","hashOfConfig":"23"},{"size":1151,"mtime":1609544742774,"results":"38","hashOfConfig":"23"},{"size":2249,"mtime":1609544742775,"results":"39","hashOfConfig":"23"},{"size":3398,"mtime":1609544742767,"results":"40","hashOfConfig":"23"},{"size":426,"mtime":1609544742780,"results":"41","hashOfConfig":"23"},{"size":347,"mtime":1609544742776,"results":"42","hashOfConfig":"23"},{"size":1050,"mtime":1609617552485,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"28a3tb",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/index.js",[],["94","95"],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/App.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Home.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Login.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Search.js",["96"],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Profile.js",[],["97","98"],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Admin.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/UserDetail.js",["99"],"import React, {useState, useEffect} from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getOneUser } from '../services/user.service'\n\nconst UserDetail = () => {\n    const [user, setUser] = useState('')\n    let { id } = useParams()\n\n    useEffect(() => {\n        getOneUser(id).then(response => {\n            setUser(response.data)\n            },\n            (error) => {\n                const _error =\n                    (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n                setUser(_error);\n              }\n        )\n    },[])\n    return(\n        <>\n            {user ? (\n                <div>\n                    <h1>{user.username}</h1>\n                    <p>{user.email}</p>\n                    {user.primaryLocation && \n                    <p>\n                        {user.primaryLocation.city},{' '}\n                        {user.primaryLocation.state},{' '} \n                        {user.primaryLocation.county}{' '}-{' '}\n                        {user.primaryLocation.country}\n                    </p>}\n                    {user.roles && \n                        user.roles.map(role => <p key={role._id}>{role.name}</p>)\n                    }\n                    {console.log(user)}\n                </div>\n            ) : (\n                <div>Loading...</div>\n            )}\n        </>\n    )\n\n}\n\nexport default UserDetail","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/About.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Signup.js",["100","101"],"import React, { useState, useRef, useEffect } from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\nimport { isEmail } from \"validator\"\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n//Components\nimport FormGroup from \"./common/FormGroup\"\n\n//Helper\nimport { register } from '../services/auth.service'\nimport { resMessage } from '../utilities/functions.utilities'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        )\n    }\n}\n\n//Function that validates username\nconst vusername = (value) => {\n    if(value.length < 3 || value.length >= 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your username must be between 3 and 20 characters\n            </div>\n        )\n    }\n}\n\n//Function that validates passwords\nconst vpassword = (value) => {\n    if(value.length < 6 || value.length >= 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Your password must be between 6 and 40 characters\n            </div>\n        )\n    }\n}\n\nconst validEmail = (value) => {\n    if(!isEmail) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                Submitted e-mail not valid\n            </div>\n        )\n    }\n}\n\nconst Register = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n    \n    const onChangeUsername = (e) => {\n        const username = e.target.value\n        setUsername(username)\n    }\n\n    const onChangePassword = (e) => {\n        const password = e.target.value\n        setPassword(password)\n    }\n\n    const onChangeEmail = (e) => {\n        const email = e.target.value\n        setEmail(email)\n    }\n\n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n    const handleSignup = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage(\"\")\n        setSuccessful(false)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            register(username, email, password, country, region, city, county).then(\n                (response) => {\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    console.log(\"COUNTY AFTER REGISTER\", county)\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            successful(false)\n        }\n\n\n    }\n\n\n    return(\n        <div>\n            <div className=\"container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Form onSubmit={handleSignup} ref={form}>\n\n                    <FormGroup text=\"username\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            validations={[required, vusername]}\n                        />\n                    </FormGroup>\n\n                    <FormGroup text=\"email\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"email\"\n                            value={email}\n                            onChange={onChangeEmail}\n                            validations={[required, validEmail]}\n                        />\n                    </FormGroup>\n\n                    <FormGroup text=\"password\">\n                        <Input\n                            type=\"password\"\n                            className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={onChangePassword}\n                            validations={[required, vpassword]}\n                        />\n                    </FormGroup>\n\n                    <CountryDropdown\n                        value={country}\n                        onChange={(val) => onChangeCountry(val)} />\n                    <RegionDropdown\n                        country={country}\n                        value={region}\n                        onChange={(val) => onChangeRegion(val)} />\n\n                    <FormGroup text=\"city\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"city\"\n                            value={city}\n                            onChange={onChangeCity}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n\n                    <div className=\"form-group\">\n                        <button className=\"btn\" >\n                            <span>Sign Up</span>\n                        </button>   \n                    </div>\n\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Dashboard.js",["102"],"import React, {useState, useEffect} from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\nimport { getFavorites, getHistory, editPrimary } from '../services/user.service'\nimport { getCurrentUser } from '../services/auth.service'\nimport Statistics from './Statistics'\n      \nconst Dashboard = () => {\n    const [currentUser, setCurrentUser] = useState(undefined)\n    const [userDashboard, setUserDashboard] = useState(undefined)\n    const [searchHistory, setSearchHistory] = useState(undefined)\n\n    useEffect(()=> {\n        const user = getCurrentUser()\n        if(user) {\n          setCurrentUser(user)\n          getFavorites().then(favorites => setUserDashboard(favorites))\n          getHistory().then(history => setSearchHistory(history))\n        }\n      }, [])\n\n    const updatePrimary = (id,city,state,country,county) => {\n        editPrimary(id,city,state,country,county)\n    }\n\n    return(\n        <>\n        {currentUser ? (\n        <div>\n            <h1>Dashboard - {currentUser.username}</h1>\n            {console.log(currentUser)}\n            {currentUser.primaryLocation ? (\n                <div>\n                    <h3>My Primary Location</h3>\n                    <div>\n                        <h4>{currentUser.primaryLocation.city}, {currentUser.primaryLocation.state} - {currentUser.primaryLocation.country}</h4>\n                    </div>\n                </div>\n            ) : (\n                <div>No Primary Location set</div>\n            )}\n        </div>\n        ) : (\n            <div>Loading...</div>\n        )}\n        {userDashboard ? (\n        <div>\n            {/* {console.log(userDashboard)} */}\n            {userDashboard.length > 0 ? (\n                <div>\n                <h2>My Locations</h2>\n                <div>\n                    {userDashboard.map(favorite=> (\n                        <div key={favorite._id}>\n                            <h4>{favorite.city}, {favorite.state} - {favorite.country}</h4>\n                            <Form onSubmit={updatePrimary}>\n                                <Input \n                                    type='hidden'\n                                    value={favorite._id}\n                                    name='id'\n                                />\n                                <Input \n                                    type='hidden'\n                                    value={favorite.city}\n                                    name='city'\n                                />\n                                <Input \n                                    type='hidden'\n                                    value={favorite.state}\n                                    name='state'\n                                />\n                                <Input \n                                    type='hidden'\n                                    value={favorite.country}\n                                    name='country'\n                                />\n                                <Input \n                                    type='hidden'\n                                    value={favorite.county}\n                                    name='county'\n                                />\n                                <Input \n                                    type='submit'\n                                    value='Set as Primary Location'\n                                    name='submit'\n                                />\n                            </Form>\n                        </div>\n                    ))}\n                </div>\n                </div>\n            ) : (\n                <div>No Favorites to Display!</div>\n            )}\n        </div>\n        ) : (\n            <div>Loading...</div>\n        )}\n        {searchHistory ? (\n        <div>\n            Search History\n            {/* {console.log(searchHistory)} */}\n            {searchHistory.length > 0 ? (\n                <div>\n                <ul>\n                    {searchHistory.map((history, index)=> (\n                        <li key={index}>{history.city}, {history.state}, {history.country}</li>\n                    ))}\n                </ul>\n                </div>\n            ) : (\n                <div>No Search History to Display!</div>\n            )}\n        </div>\n        ) : (\n            <div>Loading...</div>\n        )}\n        <Statistics />\n\n        </>\n\n    )\n}\n\nexport default Dashboard","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/common/Layout.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/common/FormGroup.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/SearchForm.js",["103","104"],"import React, { useState, useRef } from 'react'\nimport Form from 'react-validation/build/form'\nimport Input from 'react-validation/build/input'\nimport CheckButton from 'react-validation/build/button'\n\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n//Components\nimport FormGroup from \"./common/FormGroup\"\n\n//Helper\nimport { locationSearch } from '../services/location.services'\nimport { resMessage } from '../utilities/functions.utilities'\nimport searchTerm from './Search'\n\nconst axios = require('axios')\nconst GOOGLE_API_KEY = 'AIzaSyDbjklIejS9yn5KhRaEWen72vYpBu_0BZo'\n\n//Function given to react-validator\nconst required = (value) => {\n    if(!value){\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        )\n    }\n}\n\n\nconst SearchForm = (props) => {\n    const form = useRef()\n    const checkBtn = useRef()\n\n    const [message, setMessage] = useState('')\n    const [successful, setSuccessful] = useState(false)\n    const [country, setCountry] = useState('')\n    const [region, setRegion] = useState('')\n    const [city, setCity] = useState('')\n   \n    \n\n    const onChangeCountry = (val) => {\n        console.log(val)\n        setCountry(val)\n    }\n\n    const onChangeRegion = (val) => {\n        console.log(val)\n        setRegion(val)\n    }\n\n    const onChangeCity = (e) => {\n        const city = e.target.value\n        console.log(city)\n        setCity(city)\n    }\n\n    const mapSearch = async (e) => {\n        //Prevent reload of pressing the button\n        e.preventDefault()\n        //Prevent message clear them out\n        setMessage(\"\")\n        setSuccessful(false)\n\n        // validtes all the fields in your form\n        form.current.validateAll()\n        \n        // Validator stores errors and we can check if errors exist\n        \n        if(checkBtn.current.context._errors.length === 0) {\n            //Google API request\n            const apiResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${city},${region}&key=${GOOGLE_API_KEY}`)\n            //Parses over API and pulls out \"____ County\", replace removes county for disease API\n            const county = Object.values(apiResponse.data.results[0])[0][1].long_name.replace(/County/g, '')\n            locationSearch(country, region, city, county).then(\n                (response) => {\n                    // console.log(\"----ggh--\", apiResponse)\n                    setMessage(response.data.message)\n                    setSuccessful(true)\n                    console.log(\"COUNTY Is found\", county)\n                    \n                    // searchTerm(apiResponse.data.results)\n                },\n                (error) => {\n                    setMessage(resMessage(error))\n                    setSuccessful(false)\n                }\n            )\n\n        } else {\n            successful(false)\n        }\n\n\n    }\n\n\n    return(\n        <div>\n            <div className=\"container\">\n                <Form onSubmit={mapSearch} ref={form}>\n\n                    <CountryDropdown\n                        value={country}\n                        onChange={(val) => onChangeCountry(val)} />\n                    <RegionDropdown\n                        country={country}\n                        value={region}\n                        onChange={(val) => onChangeRegion(val)} />\n\n                    <FormGroup text=\"city\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"city\"\n                            value={city}\n                            onChange={onChangeCity}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n\n                    <div className=\"form-group\">\n                        <button className=\"btn\" >\n                            <span>Search</span>\n                        </button>   \n                    </div>\n\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className={successful ? \"alert alert-success\" : \"alert alert-danger\"} role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{display: \"none\"}} ref={checkBtn}/>\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchForm","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/functions.utilities.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/auth.service.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/user.service.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/components/Statistics.js",["105","106"],"import React, { useState, useEffect } from 'react'\nimport { getPrimaryLocation } from '../services/user.service'\nimport { getCurrentUser } from '../services/auth.service'\n\nconst axios = require('axios')\n\n\nconst Statistics = () => {\n    const [primaryLocation, setPrimaryLocation] = useState({})\n    //Location states\n    const [country, setCountry] = useState('')\n    const [county, setCounty] = useState('')\n    const [region, setRegion] = useState('')\n    //API Stats states\n    const [confirmedCases, setConfirmedCases] = useState('')\n    const [deaths, setDeaths] = useState('')\n    const [recovered, setRecovered] = useState('')\n    const [updatedAt, setUpdatedAt] = useState('')\n    const [historicalDates, setHistoricalDates] = useState([])\n    const [historicalCases, setHistoricalCases] = useState([])\n    const [historicalDeaths, setHistoricalDeaths] = useState([])\n\n\n    useEffect(()=>{\n        getPrimaryLocation()\n        .then(response => {\n            setPrimaryLocation(response)\n        })\n    }, [])\n\n    useEffect(()=> {\n        if(primaryLocation.county !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/jhucsse/counties/${primaryLocation.county}`)\n            .then(response => {\n                response.data.forEach(data=> {\n                //Change state abbreviation to state name\n                // const stateName = abbrState(state, 'name')\n                if(primaryLocation.state === data.province)\n                    setCountry(data.country)\n                    setCounty(data.county)\n                    setRegion(data.province)\n                    setConfirmedCases(data.stats.confirmed)\n                    setDeaths(data.stats.deaths)\n                    setRecovered(data.stats.recovered)\n                    setUpdatedAt(data.updatedAt)\n                })\n            })\n        }\n    }, [primaryLocation])\n\n    //https://disease.sh/v3/covid-19/historical/usacounties/texas?lastdays=30\n\n    useEffect(() => {\n        if(region !== undefined) {\n            axios.get(`https://disease.sh/v3/covid-19/historical/usacounties/${region.toLowerCase()}?lastdays=30`)\n            .then(response => {\n                response.data.forEach(data => {\n                    if (data.county !== undefined && data.county === county.toLowerCase()) {\n                        setHistoricalDates(Object.keys(data.timeline.cases))\n                        setHistoricalCases(Object.values(data.timeline.cases))\n                        setHistoricalDeaths(Object.values(data.timeline.deaths))\n                    }\n                })\n            })\n        }\n    }, [region])\n\n\n    // const getStatistics = async () => {\n    //     await getPrimaryLocation()\n    //     .then(response => {\n    //         setPrimaryLocation(response)\n    //     })\n    // }\n\n    return(\n        <div>\n            Statistics\n            <p>Country: {country}</p>\n            <p>County: {county}</p>\n            <p>State: {region}</p>\n            <p>Confirmed Cases: {confirmedCases}</p>\n            <p>Deaths: {deaths}</p>\n            <p>Recovered: {recovered}</p>\n            <p>Last Updated: {updatedAt}</p>\n            <ol>\n            {historicalCases.map((cases, index) => (\n                <li key={index}> Date: {historicalDates[index]} Cases: {cases} Deaths: {historicalDeaths[index]}</li>\n            ))}\n            </ol>\n        </div>\n    )\n\n}\n\nexport default Statistics","/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/localStorage.utilities.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/utilities/authHeader.utilities.js",[],"/Users/kishonst.clair/Desktop/Unit3/Covid/team-6-frontend/src/services/location.services.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":13,"column":24,"nodeType":"115","messageId":"116","endLine":13,"endColumn":37},{"ruleId":"109","replacedBy":"117"},{"ruleId":"111","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":23,"column":7,"nodeType":"121","endLine":23,"endColumn":9,"suggestions":"122"},{"ruleId":"113","severity":1,"message":"123","line":1,"column":35,"nodeType":"115","messageId":"116","endLine":1,"endColumn":44},{"ruleId":"113","severity":1,"message":"124","line":6,"column":43,"nodeType":"115","messageId":"116","endLine":6,"endColumn":60},{"ruleId":"113","severity":1,"message":"125","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":19},{"ruleId":"113","severity":1,"message":"124","line":6,"column":43,"nodeType":"115","messageId":"116","endLine":6,"endColumn":60},{"ruleId":"113","severity":1,"message":"126","line":14,"column":8,"nodeType":"115","messageId":"116","endLine":14,"endColumn":18},{"ruleId":"113","severity":1,"message":"127","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":24},{"ruleId":"119","severity":1,"message":"128","line":66,"column":8,"nodeType":"121","endLine":66,"endColumn":16,"suggestions":"129"},{"ruleId":"109","replacedBy":"130"},{"ruleId":"111","replacedBy":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'setSearchTerm' is assigned a value but never used.","Identifier","unusedVar",["132"],["133"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'useEffect' is defined but never used.","'CountryRegionData' is defined but never used.","'CheckButton' is defined but never used.","'searchTerm' is defined but never used.","'getCurrentUser' is defined but never used.","React Hook useEffect has a missing dependency: 'county'. Either include it or remove the dependency array.",["135"],["132"],["133"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [id]",{"range":"140","text":"141"},"Update the dependencies array to be: [county, region]",{"range":"142","text":"143"},[691,693],"[id]",[2600,2608],"[county, region]"]